{
  "magic": "E!vIA5L86J2I",
  "timestamp": "2025-04-20T00:49:22.572103+00:00",
  "repo": "mlswg/mls-extensions",
  "labels": [
    {
      "name": "bug",
      "description": "Something isn't working",
      "color": "d73a4a"
    },
    {
      "name": "documentation",
      "description": "Improvements or additions to documentation",
      "color": "0075ca"
    },
    {
      "name": "duplicate",
      "description": "This issue or pull request already exists",
      "color": "cfd3d7"
    },
    {
      "name": "enhancement",
      "description": "New feature or request",
      "color": "a2eeef"
    },
    {
      "name": "good first issue",
      "description": "Good for newcomers",
      "color": "7057ff"
    },
    {
      "name": "help wanted",
      "description": "Extra attention is needed",
      "color": "008672"
    },
    {
      "name": "invalid",
      "description": "This doesn't seem right",
      "color": "e4e669"
    },
    {
      "name": "question",
      "description": "Further information is requested",
      "color": "d876e3"
    },
    {
      "name": "wontfix",
      "description": "This will not be worked on",
      "color": "ffffff"
    }
  ],
  "issues": [
    {
      "number": 3,
      "id": "I_kwDOHZoI5M5UoiK7",
      "title": "New IANA registries are contrary to the main spec IANA section",
      "url": "https://github.com/mlswg/mls-extensions/issues/3",
      "state": "CLOSED",
      "author": "rohan-wire",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The extensions draft IANA section begins:\r\n\r\n> This document requests the creation of the following new IANA registries:\r\n>\r\n>* MLS Extension Types ({{extended-mls-extension-types}})\r\n>* MLS Proposal Types ({{extended-mls-proposal-types}})\r\n\r\nThis is contradictory to the clear language in the IANA considerations of the MLS protocol spec (example quoted from Section 17.2):\r\n\r\n>[17.2. ](https://www.ietf.org/archive/id/draft-ietf-mls-protocol-16.html#section-17.2)[MLS Extension Types](https://www.ietf.org/archive/id/draft-ietf-mls-protocol-16.html#name-mls-extension-types)\r\n>\r\n>This registry lists identifiers for extensions to the MLS protocol. The extension type field is two bytes wide, so valid extension type values are in the range 0x0000 to 0xffff.\r\n\r\nNew extensions are supposed to be added to the **_EXISTING_** IANA registries.",
      "createdAt": "2022-10-23T19:55:43Z",
      "updatedAt": "2022-12-16T13:39:58Z",
      "closedAt": "2022-12-16T13:39:58Z",
      "comments": [
        {
          "author": "rohan-wire",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Submitted PR #4 to fix.",
          "createdAt": "2022-10-23T19:56:51Z",
          "updatedAt": "2022-10-23T19:56:51Z"
        },
        {
          "author": "raphaelrobert",
          "authorAssociation": "MEMBER",
          "body": "Closed via #4.",
          "createdAt": "2022-12-16T13:39:58Z",
          "updatedAt": "2022-12-16T13:39:58Z"
        }
      ]
    },
    {
      "number": 7,
      "id": "I_kwDOHZoI5M5Za6JA",
      "title": "Add IANA entry for new wire format / Targeted messages",
      "url": "https://github.com/mlswg/mls-extensions/issues/7",
      "state": "CLOSED",
      "author": "raphaelrobert",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Context: https://github.com/mlswg/mls-protocol/pull/821\r\n\r\nTargeted messages should define their own wire format.",
      "createdAt": "2022-12-16T13:42:54Z",
      "updatedAt": "2023-03-13T18:15:07Z",
      "closedAt": "2023-03-13T18:15:07Z",
      "comments": []
    },
    {
      "number": 8,
      "id": "I_kwDOHZoI5M5Za9ey",
      "title": "Fix formatting issue",
      "url": "https://github.com/mlswg/mls-extensions/issues/8",
      "state": "CLOSED",
      "author": "raphaelrobert",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Formatting issue in code block in 2.2.4.2. Authentication with signatures",
      "createdAt": "2022-12-16T13:51:04Z",
      "updatedAt": "2023-01-25T14:51:29Z",
      "closedAt": "2023-01-25T14:51:29Z",
      "comments": []
    },
    {
      "number": 15,
      "id": "I_kwDOHZoI5M5r9Qz8",
      "title": "Targeted message: add IANA entries for signature labels / exporter labels",
      "url": "https://github.com/mlswg/mls-extensions/issues/15",
      "state": "OPEN",
      "author": "TWal",
      "authorAssociation": "NONE",
      "assignees": [
        "raphaelrobert"
      ],
      "labels": [],
      "body": "Now that there are IANA registries for those, we must extend them.",
      "createdAt": "2023-07-19T06:07:00Z",
      "updatedAt": "2025-02-06T08:53:00Z",
      "closedAt": null,
      "comments": [
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@raphaelrobert will take care of this once we decide what to do with targeted message extension.",
          "createdAt": "2025-01-23T18:06:11Z",
          "updatedAt": "2025-01-23T18:06:36Z"
        },
        {
          "author": "TWal",
          "authorAssociation": "NONE",
          "body": "I think this issue is now out-of-date thanks to the safe extension API, because the targeted message extension now uses SafeSignWithLabel and DeriveExtensionSecret. We can probably close it with no action.",
          "createdAt": "2025-02-06T08:53:00Z",
          "updatedAt": "2025-02-06T08:53:00Z"
        }
      ]
    },
    {
      "number": 16,
      "id": "I_kwDOHZoI5M5r9R-P",
      "title": "Targeted message: use `AuthPSKEncryptWithLabel`?",
      "url": "https://github.com/mlswg/mls-extensions/issues/16",
      "state": "OPEN",
      "author": "TWal",
      "authorAssociation": "NONE",
      "assignees": [
        "raphaelrobert"
      ],
      "labels": [],
      "body": "To be more future-proof, similarly to `EncryptWithLabel`, I guess we could design a similar function for the HPKE AuthPSK mode?\r\nThis would help ensuring future extensions that would be using the AuthPSK mode with leaf HPKE keys don't interfere with each other.",
      "createdAt": "2023-07-19T06:10:49Z",
      "updatedAt": "2025-02-06T08:56:26Z",
      "closedAt": null,
      "comments": [
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@raphaelrobert will take care of this once we decide what to do with targeted message extension.",
          "createdAt": "2025-01-23T18:06:50Z",
          "updatedAt": "2025-01-23T18:06:50Z"
        },
        {
          "author": "TWal",
          "authorAssociation": "NONE",
          "body": "It looks like this point has been addressed with the safe extensions API. However, Targeted Messages re-define a safe API for SealAuthPSK, this could be moved in the safe extension API.",
          "createdAt": "2025-02-06T08:56:25Z",
          "updatedAt": "2025-02-06T08:56:25Z"
        }
      ]
    },
    {
      "number": 22,
      "id": "I_kwDOHZoI5M51sWLz",
      "title": "SelfRemove still does not allow atomic removal of all a user's clients  ",
      "url": "https://github.com/mlswg/mls-extensions/issues/22",
      "state": "CLOSED",
      "author": "rohan-wire",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "If Alice has multiple MLS clients and wants to leave a group, even with SelfRemove as worded, she still can't remove all her clients in one-shot. Maybe we should modify the semantics of SelfRemove so the ExternalSender is allowed to include other leaf nodes with the same \"user\" credential?",
      "createdAt": "2023-11-02T15:56:52Z",
      "updatedAt": "2025-01-23T18:13:16Z",
      "closedAt": "2025-01-23T18:13:14Z",
      "comments": [
        {
          "author": "raphaelrobert",
          "authorAssociation": "MEMBER",
          "body": "I don't think we should make it that complicated. Alice can still issue a Commit removing all her other clients, create the additional SelfRemove proposal based on the new epoch, and send both to the DS in one shot. The only cost is that Alice needs to produce two signatures which I think is tolerable.",
          "createdAt": "2023-11-07T10:21:14Z",
          "updatedAt": "2023-11-07T10:21:14Z"
        },
        {
          "author": "rohan-wire",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I don't object to having two signatures, my concern is that the way the extension is defined now, an External Commit would include the SelfRemove, but not the other Remove proposals. I suppose we could change the handling of Remove proposals in the presence of SelfRemove, but SelfRemove could not operate as a safe extension in that case.",
          "createdAt": "2023-11-07T11:35:54Z",
          "updatedAt": "2023-11-07T11:35:54Z"
        },
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Virtual clients will solve this entirely for MIMI, but for now use SelfRemove as is and hoping we develop a better solution in the future.",
          "createdAt": "2025-01-23T18:13:14Z",
          "updatedAt": "2025-01-23T18:13:14Z"
        }
      ]
    },
    {
      "number": 24,
      "id": "I_kwDOHZoI5M58oHNE",
      "title": "Aren't we missing an extension to signal the strong/weak consistency chosen by the DS ?",
      "url": "https://github.com/mlswg/mls-extensions/issues/24",
      "state": "CLOSED",
      "author": "beurdouche",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-01-19T16:31:35Z",
      "updatedAt": "2025-01-23T18:15:39Z",
      "closedAt": "2025-01-23T18:15:38Z",
      "comments": [
        {
          "author": "Bren2010",
          "authorAssociation": "NONE",
          "body": "I'm not sure an extension is needed to convey this, as it's application-specific",
          "createdAt": "2024-01-19T18:16:18Z",
          "updatedAt": "2024-01-19T18:16:18Z"
        },
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Close until we have a concrete need. This is already mentioned in the MIMI policy \"stuff\".",
          "createdAt": "2025-01-23T18:15:38Z",
          "updatedAt": "2025-01-23T18:15:38Z"
        }
      ]
    },
    {
      "number": 25,
      "id": "I_kwDOHZoI5M6CjMcT",
      "title": "Collision between MLS Extension values",
      "url": "https://github.com/mlswg/mls-extensions/issues/25",
      "state": "CLOSED",
      "author": "RonPeters",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Both the required_media_types and last_resort_key_package MLS Extensions have the Value of 0x0009. I believe the last_resort_key_package should have a Value of 0x000a.\r\n\r\n[required_media_types MLS Extension](https://github.com/mlswg/mls-extensions/blob/main/draft-ietf-mls-extensions.md#required_media_types-mls-extension)\r\n[last_resort_key_package MLS Extension](https://github.com/mlswg/mls-extensions/blob/main/draft-ietf-mls-extensions.md#last_resort_key_package-mls-extension)",
      "createdAt": "2024-03-16T21:34:19Z",
      "updatedAt": "2024-03-20T10:38:57Z",
      "closedAt": "2024-03-20T10:38:57Z",
      "comments": []
    },
    {
      "number": 30,
      "id": "I_kwDOHZoI5M6QcDur",
      "title": "Unclear where the IANA registered value is used for Proposals, Wire Formats, Credentials",
      "url": "https://github.com/mlswg/mls-extensions/issues/30",
      "state": "CLOSED",
      "author": "rohanmahy",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "rohanmahy"
      ],
      "labels": [],
      "body": "It is unclear in Capabilities in LeafNodes and in the GroupContext where non-GC extension extension IDs are advertised.",
      "createdAt": "2024-07-22T16:23:49Z",
      "updatedAt": "2025-01-30T22:23:20Z",
      "closedAt": "2025-01-30T22:23:20Z",
      "comments": [
        {
          "author": "rohanmahy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The second paragraph of Section 2 of mls-extensions ended: \"so that the only value an extension developer must add to the IANA registry themselves is a unique ExtensionType.\"\r\n\r\nAuthors, is this unique ExtensionType supposed to:\r\n\r\n- be a new safe extensions registry (in which case it needs to be added to the IANA considerations),\r\n- be registered in a single existing registry regardless of the type of the extension (if so which one?), OR\r\n- be registered in the proposals registry if it is a proposal, in the wire_formats registry if it is a wire_format, etc.?\r\n\r\nI think we probably want the first of these, but could be convinced otherwise.",
          "createdAt": "2024-08-01T03:31:50Z",
          "updatedAt": "2024-08-01T03:31:50Z"
        },
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Will be addressed as -appsync to -mls-extension merge.",
          "createdAt": "2025-01-23T18:16:32Z",
          "updatedAt": "2025-01-23T18:16:32Z"
        },
        {
          "author": "raphaelrobert",
          "authorAssociation": "MEMBER",
          "body": "@bifurcation @rohanmahy was this addressed by #43?",
          "createdAt": "2025-01-28T18:44:09Z",
          "updatedAt": "2025-01-28T18:44:09Z"
        },
        {
          "author": "rohanmahy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> [@bifurcation](https://github.com/bifurcation) [@rohanmahy](https://github.com/rohanmahy) was this addressed by [#43](https://github.com/mlswg/mls-extensions/pull/43)?\n\nCovered in part in #43 and the rest in #45 ",
          "createdAt": "2025-01-29T04:30:14Z",
          "updatedAt": "2025-01-29T04:30:14Z"
        }
      ]
    },
    {
      "number": 33,
      "id": "I_kwDOHZoI5M6aOCgK",
      "title": "Add wire format capability negotiation extension",
      "url": "https://github.com/mlswg/mls-extensions/issues/33",
      "state": "CLOSED",
      "author": "bifurcation",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "bifurcation"
      ],
      "labels": [],
      "body": "A notable omission from the Capabilities / RequiredCapabilities objects in RFC 9420 is the ability to negotiate support for new wire formats.  This document should address that deficiency.  What we would need is a `supported_wire_formats` extension, where:\r\n\r\n* The content of the extension is `WireFormat wire_formats<V>;`\r\n* The extension can appear in LeafNode and GroupContextExtensions\r\n* The semantic in LeafNode is \"here are the new WireFormats I support\"\r\n* The semantic in GroupContextExtensions is \"here are the WireFormats that are required for this group\"",
      "createdAt": "2024-10-15T00:55:26Z",
      "updatedAt": "2025-02-02T17:52:06Z",
      "closedAt": "2025-02-02T17:52:05Z",
      "comments": [
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Not covered by the current appsync, but this should just be a short extension/section in the document.\n\nWould also be great if we could add this to content type.",
          "createdAt": "2025-01-23T18:18:46Z",
          "updatedAt": "2025-01-23T18:18:46Z"
        },
        {
          "author": "rohanmahy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This was added in #43 ",
          "createdAt": "2025-01-29T04:31:39Z",
          "updatedAt": "2025-01-29T04:31:39Z"
        },
        {
          "author": "raphaelrobert",
          "authorAssociation": "MEMBER",
          "body": "Closed via #43.",
          "createdAt": "2025-02-02T17:52:05Z",
          "updatedAt": "2025-02-02T17:52:05Z"
        }
      ]
    },
    {
      "number": 34,
      "id": "I_kwDOHZoI5M6aOClW",
      "title": "Streamline Safe Extensions section",
      "url": "https://github.com/mlswg/mls-extensions/issues/34",
      "state": "CLOSED",
      "author": "bifurcation",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The Safe Extensions section currently has a bunch of unnecessary baggage, which we should rearrange and/or delete.\r\n\r\nThe core of what Safe Extensions needs to define is: What does an extension need to do in order to be considered a safe extension?\r\n\r\nFrom that perspective, the sections on HPKE, signatures, export, and PSKs all make sense, in the sense that an extension is safe if the only HPKE/signature/export/PSKs mechanisms uses are the ones defined here.  That leaves the \"Security\", \"Extension Designer Tools\", and \"Extension Design Guidance\" sections.\r\n\r\n* \"Security\" should just be the introduction to the Safe Extensions section.\r\n* \"Extension Designer Tools\" should be deleted.  The mechanisms here abuse the extension types for labelling things other than extensions, and they don't really provide any value over the base extensibility mechanisms they use.  At best, they provide \"ignorable\" objects of the various types, which is a totally different property than Safe Extensions provides.\r\n* \"Extension Design Guidance\" is not specific to Safe Extensions.  It should be promoted to its own top-level section.",
      "createdAt": "2024-10-15T00:55:54Z",
      "updatedAt": "2025-02-19T07:37:02Z",
      "closedAt": "2025-02-19T07:37:02Z",
      "comments": [
        {
          "author": "kkohbrok",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I agree with your points 1 and 3. Point 3 is (I believe) already covered by Rohan's #31.\r\n\r\nOn Point 2: I partially agree in that this section should live outside of Section 2, because it's useful for both safe and unsafe extensions. I don't think it should be removed, though. The purpose of these additional structs is to allow extensions authors to just request an extension code point, after which they can create any proposal/credential or WireFormat they like without requiring additional code points. It also makes negotiation simpler, as support for an extension always implies support for all proposals, etc. associated by that extension. If anything, this mechanisms improve the base extensibility mechanisms we have in MLS.",
          "createdAt": "2024-10-15T10:12:24Z",
          "updatedAt": "2024-10-15T10:12:24Z"
        },
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Will be addressed with refactoring PR.",
          "createdAt": "2025-01-23T18:19:33Z",
          "updatedAt": "2025-01-23T18:19:33Z"
        },
        {
          "author": "rohanmahy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I believe this is now addressed in #43 ",
          "createdAt": "2025-01-29T04:31:00Z",
          "updatedAt": "2025-01-29T04:31:00Z"
        }
      ]
    },
    {
      "number": 47,
      "id": "I_kwDOHZoI5M6owkSZ",
      "title": "Re-frame \"Safe Additional Authenticated Data (AAD)\"",
      "url": "https://github.com/mlswg/mls-extensions/issues/47",
      "state": "OPEN",
      "author": "TWal",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "The section about Safe Additional Authenticated Data (AAD) discuss about the `authenticated_data` field of `PrivateContentAAD`.\n\nIt seems to me that this field is defined to be identical to `authenticated_data` in `FramedContent`. Shouldn't we frame this section about `FramedContent` then?",
      "createdAt": "2025-02-04T21:08:53Z",
      "updatedAt": "2025-02-21T14:28:20Z",
      "closedAt": null,
      "comments": [
        {
          "author": "rohanmahy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "There are 3 places where `authenticated_data` appears. I think this needs to apply to all of them.\n- `PrivateContentAAD`\n- `PrivateMessage`\n- `FramedContent`\n\nI'll write something up to fix that.",
          "createdAt": "2025-02-12T19:06:35Z",
          "updatedAt": "2025-02-12T19:06:35Z"
        },
        {
          "author": "rohanmahy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think this can get closed with the merge of #50 ",
          "createdAt": "2025-02-21T04:32:08Z",
          "updatedAt": "2025-02-21T04:32:08Z"
        },
        {
          "author": "TWal",
          "authorAssociation": "NONE",
          "body": "Indeed the text is less confusing now, thanks!\n\nStill, I am wondering: it seems to be that MLS clients deal primarily with `FramedContent`, and MLS implementations translate them to `PublicMessage` or `PrivateMessage`, which are more like internal structures? If this is true, I would have framed it as \"An MLS FramedContent can contain [...]\" instead of \"An MLS PrivateMessage can contain [...]\", but this is mostly nit-picking so I guess we can close.",
          "createdAt": "2025-02-21T13:47:11Z",
          "updatedAt": "2025-02-21T13:47:11Z"
        },
        {
          "author": "rohanmahy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Ultimately, there is no way to include application-specific AAD in a PublicMessage because there is no place to put it. Hence I mentioned PrivateMessage. Of course a SemiPrivate message will have the same properties.",
          "createdAt": "2025-02-21T14:10:03Z",
          "updatedAt": "2025-02-21T14:10:03Z"
        },
        {
          "author": "TWal",
          "authorAssociation": "NONE",
          "body": "I don't understand, `PublicMessage` contains `FramedContent content;` which itself contains `opaque authenticated_data<V>;`?",
          "createdAt": "2025-02-21T14:15:16Z",
          "updatedAt": "2025-02-21T14:15:16Z"
        },
        {
          "author": "rohanmahy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Sorry, I guess I just think of it as the first A in AAD. All the data in a PublicMessage is authenticated data. It doesn't have any different properties in the authenticated_data field than it would elsewhere in the message (in application_data for example).\nBy \"no place to put it\" I just meant that there is no AEAD algorithm we are putting the **_A_** AD into.\n\nI suppose it is perfectly OK to still call this AAD, it's just a different definition. Do you think having application-defined content in authenticated_data is useful in a PublicMessage?",
          "createdAt": "2025-02-21T14:28:18Z",
          "updatedAt": "2025-02-21T14:28:18Z"
        }
      ]
    },
    {
      "number": 48,
      "id": "I_kwDOHZoI5M6o-xse",
      "title": "`SafeEncryptWithContext` should use `EncryptWithLabel`",
      "url": "https://github.com/mlswg/mls-extensions/issues/48",
      "state": "OPEN",
      "author": "TWal",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "MLS defines the safe-ish `SignWithLabel`, `ExpandWithLabel`, `EncryptWithLabel` etc, and the safe API relies on it:\n- `SafeSignWithLabel` uses `SignWithLabel`\n- `DeriveExtensionSecret` uses `ExpandWithLabel`\n\nHowever `SafeEncryptWithContext` doesn't use `EncryptWithLabel` and operate directly with `HPKE.SealBase`. Is there a technical reason for this?\n\nI think it should use `EncryptWithLabel` to ensure proper domain separation with HPKE uses in the MLS RFC. Otherwise, we must ensure that MLS' `EncryptContext` and Safe API's `LabeledExtensionContent` cannot be serialized to the same bytestring (to follow the secure formatting rules of the [Comparse paper](https://eprint.iacr.org/2023/1390)). The latter fact seems to hold, under the condition that `LabeledExtensionContent.label` uses a QUIC-style length encoding (which is not clear because it is written as `opaque label` and not `opaque label<V>`). Using `EncryptWithLabel` would make that fact straightforward.",
      "createdAt": "2025-02-06T09:43:09Z",
      "updatedAt": "2025-02-06T09:43:09Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 53,
      "id": "I_kwDOHZoI5M6xCIpA",
      "title": "There's a missing link here",
      "url": "https://github.com/mlswg/mls-extensions/issues/53",
      "state": "OPEN",
      "author": "raphaelrobert",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "              There's a missing link here\r\n\r\n_Originally posted by @timokoesters in https://github.com/mlswg/mls-extensions/pull/51#discussion_r2025482736_\r\n            ",
      "createdAt": "2025-04-03T16:25:09Z",
      "updatedAt": "2025-04-03T16:25:09Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 55,
      "id": "I_kwDOHZoI5M6yZvuX",
      "title": "Suggested proposal types for AppDataUpdate and SelfRemove are the same",
      "url": "https://github.com/mlswg/mls-extensions/issues/55",
      "state": "OPEN",
      "author": "mulmarta",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Both proposals suggest type 8. IANA will eventually sort it out but it would be nice to sort it out now. I suggest 10 for SelfRemove",
      "createdAt": "2025-04-14T13:31:55Z",
      "updatedAt": "2025-04-14T13:31:55Z",
      "closedAt": null,
      "comments": []
    }
  ],
  "pulls": [
    {
      "number": 1,
      "id": "PR_kwDOHZoI5M479E8G",
      "title": "Targeted messages draft",
      "url": "https://github.com/mlswg/mls-extensions/pull/1",
      "state": "MERGED",
      "author": "raphaelrobert",
      "authorAssociation": "MEMBER",
      "assignees": [
        "raphaelrobert"
      ],
      "labels": [],
      "body": "",
      "createdAt": "2022-07-22T14:36:35Z",
      "updatedAt": "2022-11-25T16:23:55Z",
      "baseRepository": "mlswg/mls-extensions",
      "baseRefName": "main",
      "baseRefOid": "87eff2a22db8663171ceacdcf2edce2a01183f00",
      "headRepository": "mlswg/mls-extensions",
      "headRefName": "targeted-messages",
      "headRefOid": "279975339ba5e521765511fb004f5cace14b8768",
      "closedAt": "2022-11-25T16:23:54Z",
      "mergedAt": "2022-11-25T16:23:54Z",
      "mergedBy": "raphaelrobert",
      "mergeCommit": {
        "oid": "424aaab30e9a825984227261764025b9fa895f1a"
      },
      "comments": [
        {
          "author": "raphaelrobert",
          "authorAssociation": "MEMBER",
          "body": "> I don't exactly understand how things work: how do we obtain the value `encrypted_targeted_message_content`? Is there two layers of encryptions, since TargetMessageContent is encrypted and contains an `HPKECiphertext`?\r\n\r\nThanks for the review @TWal! There was a part missing, that actually turned out to not be as trivial and I made some more changes. I think that it should be more explicit now. Originally, I thought it could be more similar to `MLSCiphertext`, but it turns out that doesn't work.\r\nI think there's more than one way of doing it, right now I mostly wanted to avoid double encryption. Maybe you find a more elegant way to separate the different nested structs.",
          "createdAt": "2022-10-01T17:24:05Z",
          "updatedAt": "2022-10-01T17:24:05Z"
        },
        {
          "author": "raphaelrobert",
          "authorAssociation": "MEMBER",
          "body": "I will go ahead and merge this in order to publish a new draft. This will require some more analysis obviously.",
          "createdAt": "2022-11-25T16:22:30Z",
          "updatedAt": "2022-11-25T16:22:30Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHZoI5M4_Ytkr",
          "commit": {
            "abbreviatedOid": "14f5567"
          },
          "author": "franziskuskiefer",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "Some first comments.\r\nThe general approach looks fine. But I'm a little worried about the way the encryption and authentication work together. Maybe you can work out a little better what the security (confidentiality and authentication) guarantees should be for targeted messages (also compared to regular MLS application messages). They are not entirely clear to me.",
          "createdAt": "2022-08-05T14:24:18Z",
          "updatedAt": "2022-08-08T11:28:24Z",
          "comments": [
            {
              "originalPosition": 57,
              "body": "```suggestion\r\nThis extensions introduces a new message type to the MLS protocol,\r\n```",
              "createdAt": "2022-08-05T14:24:19Z",
              "updatedAt": "2022-08-08T11:28:24Z"
            },
            {
              "originalPosition": 99,
              "body": "It's worth noting that the signature/hpke scheme is the same as the one defined in the MLS ciphersuite of the group. I could imagine using a different mechanism for the signature here for example.",
              "createdAt": "2022-08-08T10:58:00Z",
              "updatedAt": "2022-08-08T11:28:24Z"
            },
            {
              "originalPosition": 118,
              "body": "So this is only needed when using signatures, right?",
              "createdAt": "2022-08-08T10:59:15Z",
              "updatedAt": "2022-08-08T11:28:24Z"
            },
            {
              "originalPosition": 140,
              "body": "Why not allow `mode_auth`?",
              "createdAt": "2022-08-08T11:14:19Z",
              "updatedAt": "2022-08-08T11:28:24Z"
            },
            {
              "originalPosition": 149,
              "body": "Is the idea that the PSK binds the message to an epoch? The security properties are a little unclear because the HPKE key is a relatively long-lived key but this one is not.\r\nReading further it looks like you really want to use PSK (encryption) and want use HPKE/Signature (authentication) only for authentication? This doesn't become clear from the text. I thought you were doing HPKE (encryption) + hpke_auth/signature (authentication). But then the encryption is always HPKE (not PSK), which makes me very confused.",
              "createdAt": "2022-08-08T11:17:02Z",
              "updatedAt": "2022-08-08T11:28:24Z"
            },
            {
              "originalPosition": 155,
              "body": "Using `HPKEAuth` when it is actually `HPKEAuthPsk` is a little confusing.",
              "createdAt": "2022-08-08T11:17:24Z",
              "updatedAt": "2022-08-08T11:28:24Z"
            },
            {
              "originalPosition": 160,
              "body": "You should mention somewhere that `SealAuthPSK` etc. are from RFC 9180.",
              "createdAt": "2022-08-08T11:18:41Z",
              "updatedAt": "2022-08-08T11:28:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHZoI5M4_kJxz",
          "commit": {
            "abbreviatedOid": "14f5567"
          },
          "author": "raphaelrobert",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "Thanks for the review, I hope my comments clarify things.",
          "createdAt": "2022-08-09T09:56:37Z",
          "updatedAt": "2022-08-09T10:02:53Z",
          "comments": [
            {
              "originalPosition": 149,
              "body": "We could drop the PSK part, but that would be unnecessarily weak because all security guarantees would only depend on the HPKE keys. Using the PSK gives us a pretty efficient way to couple targeted messages with the key schedule of the base protocol to achieve the following guarantees:\r\n\r\n - FS & PCS that we have between epochs\r\n - Better confidentiality, meaning a passive attacker must compromise the group state as well, not just the HPKE key\r\n - Proof of membership, meaning an active attacker must compromise the group state as well, not just the HPKE key\r\n\r\nSo in other words, we always use HPKE + PSK for encryption. For authentication, we always use PSK, and additionally either HPKEAuth or signatures. The latter is really either `mode_auth_psk` or `mode_psk + Signature`.",
              "createdAt": "2022-08-09T09:56:38Z",
              "updatedAt": "2022-08-09T10:02:53Z"
            },
            {
              "originalPosition": 140,
              "body": "See the comment below.",
              "createdAt": "2022-08-09T09:57:13Z",
              "updatedAt": "2022-08-09T10:02:53Z"
            },
            {
              "originalPosition": 118,
              "body": "That's correct",
              "createdAt": "2022-08-09T10:00:20Z",
              "updatedAt": "2022-08-09T10:02:53Z"
            },
            {
              "originalPosition": 160,
              "body": "Good point.",
              "createdAt": "2022-08-09T10:00:37Z",
              "updatedAt": "2022-08-09T10:02:53Z"
            },
            {
              "originalPosition": 155,
              "body": "I see how that's confusing. I left out the PSK part because it is common to both authentication modes and therefore not a differentiator. I'll try to think of a better name.",
              "createdAt": "2022-08-09T10:02:00Z",
              "updatedAt": "2022-08-09T10:02:53Z"
            },
            {
              "originalPosition": 99,
              "body": "Good point.",
              "createdAt": "2022-08-09T10:02:18Z",
              "updatedAt": "2022-08-09T10:02:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHZoI5M4_qsIE",
          "commit": {
            "abbreviatedOid": "cef89c3"
          },
          "author": "franziskuskiefer",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-08-10T12:01:46Z",
          "updatedAt": "2022-08-10T12:02:24Z",
          "comments": [
            {
              "originalPosition": 149,
              "body": "I'm all for using PSK here \ud83d\ude42 \r\nMy main point is that it needs to become clear where the security is coming from and how the different things work together.\r\nThe PSK in HPKE is only used for the key schedule, not the KEM. Hence, the encapsulation is independent of the PSK and only dependent on the long-lived HPKE key. The encryption happens with the key from the HPKE key schedule that includes the PSK.\r\n\r\nSo I'd suggest to add your explanations about the security guarantees and some basic explanation (like the one above) for how the PSK is used in HPKE (to make it clear where the security properties come from).",
              "createdAt": "2022-08-10T12:01:46Z",
              "updatedAt": "2022-08-10T12:02:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHZoI5M5DFqFd",
          "commit": {
            "abbreviatedOid": "4d67e13"
          },
          "author": "TWal",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "I don't exactly understand how things work: how do we obtain the value `encrypted_targeted_message_content`?\r\nIs there two layers of encryptions, since TargetMessageContent is encrypted and contains an `HPKECiphertext`?",
          "createdAt": "2022-09-29T15:46:17Z",
          "updatedAt": "2022-09-29T16:25:58Z",
          "comments": [
            {
              "originalPosition": 100,
              "body": "Usually, enums are in snake_case and have explicit numbers associated with them",
              "createdAt": "2022-09-29T15:46:17Z",
              "updatedAt": "2022-09-29T16:25:58Z"
            },
            {
              "originalPosition": 193,
              "body": "```suggestion\r\nsignature = SignWithLabel(., \"TargetedMessageTBS\", targeted_message_tbs)\r\n```\r\nfor consistency with the rest of MLS",
              "createdAt": "2022-09-29T15:46:33Z",
              "updatedAt": "2022-09-29T16:25:58Z"
            },
            {
              "originalPosition": 205,
              "body": "```suggestion\r\nVerifyWithLabel.verify(sender_leaf_node.signature_key, \"TargetedMessageTBS\", targeted_message_tbs, signature)\r\n```\r\nfor consistency with the rest of MLS",
              "createdAt": "2022-09-29T15:46:59Z",
              "updatedAt": "2022-09-29T16:25:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHZoI5M5DdRBo",
          "commit": {
            "abbreviatedOid": "2cb32fa"
          },
          "author": "franziskuskiefer",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "I made a PR to fix the build #2.\r\n\r\nAnd I left a question about the `SealAuthPSK` aad.",
          "createdAt": "2022-10-05T16:46:52Z",
          "updatedAt": "2022-10-05T16:47:51Z",
          "comments": [
            {
              "originalPosition": 213,
              "body": "If I read this correctly, you use `targeted_message_tbm` as `aad`, which means it is public.\r\nIs this what you intend to do? The content looks like something that shouldn't be \"public\"\r\nA related question is probably what the attacker model is, in particular is the attacker another group member or from outside the group?",
              "createdAt": "2022-10-05T16:46:52Z",
              "updatedAt": "2022-10-05T16:47:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHZoI5M5ErtkM",
          "commit": {
            "abbreviatedOid": "2cb32fa"
          },
          "author": "raphaelrobert",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-23T13:22:23Z",
          "updatedAt": "2022-10-23T13:22:24Z",
          "comments": [
            {
              "originalPosition": 213,
              "body": "I'm not sure what you mean with 'public' in this context? My understanding is that the AAD is only included in the integrity verification but the actual payload is not included.\r\n\r\nThe attacker model should be the same as for the core MLS protocol. The base attacker is a network attacker, but you also need to consider what could happen if that attacker has compromised group members.",
              "createdAt": "2022-10-23T13:22:24Z",
              "updatedAt": "2022-10-23T13:22:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHZoI5M5FHunw",
          "commit": {
            "abbreviatedOid": "2799753"
          },
          "author": "franziskuskiefer",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-28T08:16:36Z",
          "updatedAt": "2022-10-28T08:16:36Z",
          "comments": [
            {
              "originalPosition": 213,
              "body": "The way AAD is transferred is outside of the security models. It's attacker controlled, but actual mode of transport is irrelevant.\r\nThere's just a lot of stuff in there and I wanted to make sure this is intentional. I  don't think I see anything dangerous in there.",
              "createdAt": "2022-10-28T08:16:36Z",
              "updatedAt": "2022-10-28T08:16:36Z"
            }
          ]
        }
      ]
    },
    {
      "number": 2,
      "id": "PR_kwDOHZoI5M5AOtKB",
      "title": "fix code blocks and other nits",
      "url": "https://github.com/mlswg/mls-extensions/pull/2",
      "state": "CLOSED",
      "author": "franziskuskiefer",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "@raphaelrobert this should fix the build",
      "createdAt": "2022-10-05T16:43:33Z",
      "updatedAt": "2022-10-23T12:49:55Z",
      "baseRepository": "mlswg/mls-extensions",
      "baseRefName": "targeted-messages",
      "baseRefOid": "2cb32fa3328d9be7c244ea91839b20ceefffc7a9",
      "headRepository": "franziskuskiefer/mls-extensions",
      "headRefName": "patch-1",
      "headRefOid": "95a110a390aff3ebb4ba5a0a2f44d4f97eadc416",
      "closedAt": "2022-10-23T12:49:54Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "raphaelrobert",
          "authorAssociation": "MEMBER",
          "body": "Turns out the build error was something else entirely. I'm closing this, but I ported the typo fix. Thanks again.",
          "createdAt": "2022-10-23T12:49:54Z",
          "updatedAt": "2022-10-23T12:49:54Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHZoI5M5DdQML",
          "commit": {
            "abbreviatedOid": "95a110a"
          },
          "author": "franziskuskiefer",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-05T16:44:07Z",
          "updatedAt": "2022-10-05T16:44:17Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "This looks like a typo?",
              "createdAt": "2022-10-05T16:44:07Z",
              "updatedAt": "2022-10-05T16:44:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHZoI5M5Errrz",
          "commit": {
            "abbreviatedOid": "95a110a"
          },
          "author": "raphaelrobert",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "Thanks!",
          "createdAt": "2022-10-23T12:20:03Z",
          "updatedAt": "2022-10-23T12:20:03Z",
          "comments": []
        }
      ]
    },
    {
      "number": 4,
      "id": "PR_kwDOHZoI5M5BXdtN",
      "title": "Fix IANA Considerations Section to use existing registries",
      "url": "https://github.com/mlswg/mls-extensions/pull/4",
      "state": "MERGED",
      "author": "rohan-wire",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The MLS protocol spec defines IANA registries explicitly for extensions. See Issue #3 ",
      "createdAt": "2022-10-23T19:56:07Z",
      "updatedAt": "2022-10-29T15:23:44Z",
      "baseRepository": "mlswg/mls-extensions",
      "baseRefName": "main",
      "baseRefOid": "87eff2a22db8663171ceacdcf2edce2a01183f00",
      "headRepository": "rohan-wire/mls-extensions",
      "headRefName": "rohan/normal-extensions",
      "headRefOid": "9fb13ce38c3a21a7377e2e8a747e6c64880e4d3b",
      "closedAt": "2022-10-29T15:23:44Z",
      "mergedAt": "2022-10-29T15:23:43Z",
      "mergedBy": "raphaelrobert",
      "mergeCommit": {
        "oid": "69c8f5a527eb7a4c9e4529699e502114985a7951"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHZoI5M5FM4KK",
          "commit": {
            "abbreviatedOid": "9fb13ce"
          },
          "author": "raphaelrobert",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-10-29T15:22:19Z",
          "updatedAt": "2022-10-29T15:22:19Z",
          "comments": []
        }
      ]
    },
    {
      "number": 5,
      "id": "PR_kwDOHZoI5M5BXjC3",
      "title": "Add Content Advertisement extensions",
      "url": "https://github.com/mlswg/mls-extensions/pull/5",
      "state": "CLOSED",
      "author": "rohan-wire",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This PR contains the text that I will also submit as draft-mahy-mls-content-adv-00.\r\n\r\nThese extensions should have a home, whether a separate document or here.\r\n",
      "createdAt": "2022-10-23T21:18:28Z",
      "updatedAt": "2022-12-28T20:29:08Z",
      "baseRepository": "mlswg/mls-extensions",
      "baseRefName": "main",
      "baseRefOid": "69c8f5a527eb7a4c9e4529699e502114985a7951",
      "headRepository": "rohan-wire/mls-extensions",
      "headRefName": "rohan/media-types",
      "headRefOid": "a1d9c76a6057736693eb289431f60862c14a7eb9",
      "closedAt": "2022-12-28T20:29:08Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "raphaelrobert",
          "authorAssociation": "MEMBER",
          "body": "Thanks, I'll leave this open until the decision is taken in which document it should go. Probably to be discussed at the next interim.",
          "createdAt": "2022-10-29T15:25:15Z",
          "updatedAt": "2022-10-29T15:25:15Z"
        },
        {
          "author": "raphaelrobert",
          "authorAssociation": "MEMBER",
          "body": "Discussed during interim on Dec 16, 2022: Consensus to merge",
          "createdAt": "2022-12-16T16:34:05Z",
          "updatedAt": "2022-12-16T16:34:05Z"
        },
        {
          "author": "rohan-wire",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Replaced this PR with #11 . Closing this one.",
          "createdAt": "2022-12-28T20:29:08Z",
          "updatedAt": "2022-12-28T20:29:08Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 6,
      "id": "PR_kwDOHZoI5M5DuMTm",
      "title": "draft-01",
      "url": "https://github.com/mlswg/mls-extensions/pull/6",
      "state": "MERGED",
      "author": "raphaelrobert",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Prepares draft-01",
      "createdAt": "2022-11-25T17:30:18Z",
      "updatedAt": "2022-11-25T17:38:21Z",
      "baseRepository": "mlswg/mls-extensions",
      "baseRefName": "main",
      "baseRefOid": "424aaab30e9a825984227261764025b9fa895f1a",
      "headRepository": "mlswg/mls-extensions",
      "headRefName": "draft-01",
      "headRefOid": "ade2f3dcbf9853629d9e13497863626214cc2486",
      "closedAt": "2022-11-25T17:38:21Z",
      "mergedAt": "2022-11-25T17:38:21Z",
      "mergedBy": "raphaelrobert",
      "mergeCommit": {
        "oid": "edd6618cba4300c55d515b66ea0d71516632a7b9"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 9,
      "id": "PR_kwDOHZoI5M5FpUF5",
      "title": "Fix code blocks",
      "url": "https://github.com/mlswg/mls-extensions/pull/9",
      "state": "MERGED",
      "author": "raphaelrobert",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Fixes #8 and reformats code blocks in general.",
      "createdAt": "2022-12-16T14:12:24Z",
      "updatedAt": "2023-01-25T14:51:28Z",
      "baseRepository": "mlswg/mls-extensions",
      "baseRefName": "main",
      "baseRefOid": "edd6618cba4300c55d515b66ea0d71516632a7b9",
      "headRepository": "mlswg/mls-extensions",
      "headRefName": "fix-code-blocks",
      "headRefOid": "afb5bed26632e9d5bf933cbef094c4f2ed57705f",
      "closedAt": "2023-01-25T14:51:27Z",
      "mergedAt": "2023-01-25T14:51:27Z",
      "mergedBy": "raphaelrobert",
      "mergeCommit": {
        "oid": "58446752cf8982ffb8f58719eefeae750cd89d9d"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHZoI5M5IyE5L",
          "commit": {
            "abbreviatedOid": "afb5bed"
          },
          "author": "rohan-wire",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-12-16T16:01:33Z",
          "updatedAt": "2022-12-16T16:01:33Z",
          "comments": []
        }
      ]
    },
    {
      "number": 10,
      "id": "PR_kwDOHZoI5M5F60vh",
      "title": "Fix links in README.md",
      "url": "https://github.com/mlswg/mls-extensions/pull/10",
      "state": "MERGED",
      "author": "rohan-wire",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The links in the mls-extensions README were pointing at mls-federation.",
      "createdAt": "2022-12-21T01:26:17Z",
      "updatedAt": "2023-01-25T14:51:48Z",
      "baseRepository": "mlswg/mls-extensions",
      "baseRefName": "main",
      "baseRefOid": "edd6618cba4300c55d515b66ea0d71516632a7b9",
      "headRepository": "rohan-wire/mls-extensions",
      "headRefName": "rohan/fix-readme-links",
      "headRefOid": "afd9381f0afcb2b692f02b583265839a131e74f3",
      "closedAt": "2023-01-25T14:51:47Z",
      "mergedAt": "2023-01-25T14:51:47Z",
      "mergedBy": "raphaelrobert",
      "mergeCommit": {
        "oid": "7bf5db00841f4d548ea033bbda5f84f4e019110e"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 11,
      "id": "PR_kwDOHZoI5M5F65HF",
      "title": "Add Content Advertisement extensions",
      "url": "https://github.com/mlswg/mls-extensions/pull/11",
      "state": "MERGED",
      "author": "rohan-wire",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "As decided at 16-Dec-2022 Interim WG meeting",
      "createdAt": "2022-12-21T01:57:45Z",
      "updatedAt": "2023-01-25T14:51:13Z",
      "baseRepository": "mlswg/mls-extensions",
      "baseRefName": "main",
      "baseRefOid": "edd6618cba4300c55d515b66ea0d71516632a7b9",
      "headRepository": "rohan-wire/mls-extensions",
      "headRefName": "rohan/add-content-adv",
      "headRefOid": "7616882678421db37caec415ccaf4854dcb72a25",
      "closedAt": "2023-01-25T14:51:13Z",
      "mergedAt": "2023-01-25T14:51:13Z",
      "mergedBy": "raphaelrobert",
      "mergeCommit": {
        "oid": "760dd0833a6fdb25a7fccb7f7498721c7f88622c"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 12,
      "id": "PR_kwDOHZoI5M5L63t4",
      "title": "Prepare draft-01",
      "url": "https://github.com/mlswg/mls-extensions/pull/12",
      "state": "MERGED",
      "author": "raphaelrobert",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-03-13T17:56:59Z",
      "updatedAt": "2023-03-13T18:16:09Z",
      "baseRepository": "mlswg/mls-extensions",
      "baseRefName": "main",
      "baseRefOid": "7bf5db00841f4d548ea033bbda5f84f4e019110e",
      "headRepository": "mlswg/mls-extensions",
      "headRefName": "draft01",
      "headRefOid": "3acb10748fbcbd4116470451ba97c5c3de3776ec",
      "closedAt": "2023-03-13T18:16:08Z",
      "mergedAt": "2023-03-13T18:16:08Z",
      "mergedBy": "raphaelrobert",
      "mergeCommit": {
        "oid": "742d47630452bcbd29e0358a7b4d5259a6e36689"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 13,
      "id": "PR_kwDOHZoI5M5L69FN",
      "title": "New wire format for targeted messages",
      "url": "https://github.com/mlswg/mls-extensions/pull/13",
      "state": "MERGED",
      "author": "raphaelrobert",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Closes #7.",
      "createdAt": "2023-03-13T18:09:58Z",
      "updatedAt": "2023-03-13T18:15:02Z",
      "baseRepository": "mlswg/mls-extensions",
      "baseRefName": "main",
      "baseRefOid": "7bf5db00841f4d548ea033bbda5f84f4e019110e",
      "headRepository": "mlswg/mls-extensions",
      "headRefName": "tm-wire-format",
      "headRefOid": "0a33932751a1525c61b06f9982f2d19df418233a",
      "closedAt": "2023-03-13T18:15:02Z",
      "mergedAt": "2023-03-13T18:15:02Z",
      "mergedBy": "raphaelrobert",
      "mergeCommit": {
        "oid": "300dcbeead4b574c1db42c284dc3d835b2fd8988"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 14,
      "id": "PR_kwDOHZoI5M5PSvKU",
      "title": "Add content type for targeted messages",
      "url": "https://github.com/mlswg/mls-extensions/pull/14",
      "state": "CLOSED",
      "author": "kkohbrok",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Adding a content_type field to TargetedMessages allows other extensions to use them without fear of protocol confusion attacks. The alternative would be to use the content advertisement mechanism, which doesn't seem particularly clean, however, as we'd be mixing protocol and application level.\r\n\r\nThis is a draft as basis for further discussion. Especially the IANA considerations for the content type enum are missing.",
      "createdAt": "2023-04-27T12:40:33Z",
      "updatedAt": "2023-10-18T08:54:01Z",
      "baseRepository": "mlswg/mls-extensions",
      "baseRefName": "main",
      "baseRefOid": "742d47630452bcbd29e0358a7b4d5259a6e36689",
      "headRepository": "kkohbrok/mls-extensions",
      "headRefName": "konrad/content_type",
      "headRefOid": "62e36ec8ef5bfaf7fe39ca337e688b15611305f7",
      "closedAt": "2023-10-18T08:54:00Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "kkohbrok",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Closing this for now.",
          "createdAt": "2023-10-18T08:54:00Z",
          "updatedAt": "2023-10-18T08:54:00Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 17,
      "id": "PR_kwDOHZoI5M5WaFCL",
      "title": "Last resort KeyPackage Extension",
      "url": "https://github.com/mlswg/mls-extensions/pull/17",
      "state": "MERGED",
      "author": "kkohbrok",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-07-26T07:21:06Z",
      "updatedAt": "2023-10-23T15:30:33Z",
      "baseRepository": "mlswg/mls-extensions",
      "baseRefName": "main",
      "baseRefOid": "742d47630452bcbd29e0358a7b4d5259a6e36689",
      "headRepository": "kkohbrok/mls-extensions",
      "headRefName": "konrad/last_resort",
      "headRefOid": "70d946db67cf5d107677606adf6647918b662538",
      "closedAt": "2023-10-23T15:30:33Z",
      "mergedAt": "2023-10-23T15:30:33Z",
      "mergedBy": "raphaelrobert",
      "mergeCommit": {
        "oid": "aafd319e5ba20a69d4155387c1a9f411c89d4c80"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHZoI5M5dDrjG",
          "commit": {
            "abbreviatedOid": "1c64f74"
          },
          "author": "raphaelrobert",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "Thanks, just one nit.",
          "createdAt": "2023-08-03T14:32:35Z",
          "updatedAt": "2023-08-03T14:33:46Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "It's not entirely clear to me why last-resort KPs should be different from other KPs, i.e. the example is not really motivated.",
              "createdAt": "2023-08-03T14:32:35Z",
              "updatedAt": "2023-08-03T14:33:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHZoI5M5k0fml",
          "commit": {
            "abbreviatedOid": "5be587b"
          },
          "author": "rohan-wire",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-10-22T19:42:47Z",
          "updatedAt": "2023-10-22T19:42:55Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "Indented quote from the spec might be better here\r\n",
              "createdAt": "2023-10-22T19:42:47Z",
              "updatedAt": "2023-10-22T19:42:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHZoI5M5k51a_",
          "commit": {
            "abbreviatedOid": "70d946d"
          },
          "author": "raphaelrobert",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-10-23T15:30:02Z",
          "updatedAt": "2023-10-23T15:30:02Z",
          "comments": []
        }
      ]
    },
    {
      "number": 18,
      "id": "PR_kwDOHZoI5M5YROS6",
      "title": "Message Streams",
      "url": "https://github.com/mlswg/mls-extensions/pull/18",
      "state": "CLOSED",
      "author": "jbis9051",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-08-18T18:02:12Z",
      "updatedAt": "2024-07-22T14:37:06Z",
      "baseRepository": "mlswg/mls-extensions",
      "baseRefName": "main",
      "baseRefOid": "742d47630452bcbd29e0358a7b4d5259a6e36689",
      "headRepository": "jbis9051/mls-extensions",
      "headRefName": "main",
      "headRefOid": "fc1d961904d8db184ed411dcb1ce67646f8d21b5",
      "closedAt": "2024-07-22T14:37:05Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "jbis9051",
          "authorAssociation": "NONE",
          "body": "https://mailarchive.ietf.org/arch/msg/mls/0fIOJicObz5CPaNx9dRfdwZyqIM/",
          "createdAt": "2023-08-18T18:03:14Z",
          "updatedAt": "2023-08-18T18:03:14Z"
        },
        {
          "author": "raphaelrobert",
          "authorAssociation": "MEMBER",
          "body": "Closing because of inactivity. Feel free to re-open if you want to work on this again.",
          "createdAt": "2024-07-22T14:37:05Z",
          "updatedAt": "2024-07-22T14:37:05Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHZoI5M5ee-5J",
          "commit": {
            "abbreviatedOid": "fc1d961"
          },
          "author": "jbis9051",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-18T20:23:18Z",
          "updatedAt": "2023-08-18T20:23:19Z",
          "comments": [
            {
              "originalPosition": 80,
              "body": "This should `aasvg` but I don't know how to add it without breaking the build process",
              "createdAt": "2023-08-18T20:23:18Z",
              "updatedAt": "2023-08-18T20:23:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHZoI5M5e3u86",
          "commit": {
            "abbreviatedOid": "fc1d961"
          },
          "author": "TWal",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "Looks overall good, however I think there is no need to derive a second separate secret tree.\r\nWe can derive the `message_stream_[I]` from the original secret tree.\r\n\r\nAs a personal taste, I wouldn't serialize the stream number in ascii as is suggested by `message_stream_[I]`, and instead use the standard big-endian encoding (e.g. in the `context` input of `ExpandWithLabel`).\r\n\r\nAs noted in a separate comment, `stream_id` is not authenticated by signature of `FramedContentTBS`.\r\nIt is probably fine because it is implicitly authenticated as being part of the key derivations to obtain the encryption key, though, but I'm not entirely sure about that (didn't think deeply about it).",
          "createdAt": "2023-08-23T13:55:39Z",
          "updatedAt": "2023-08-23T14:20:59Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "```suggestion\r\nSome applications may require more than one application message ratchet. For example, an application may want to send messages with different delivery semantics or different policies. This section describes an extension to MLS which allows MLS clients to send multiple types of messages. Each message type has its own independent key ratchet.\r\n```\r\n\r\nOverall I find this introduction a bit vague. I understood that the main motivation was to be able to process the different streams at different paces, i.e. to be able to decrypt latest message of stream A without decrypting all messages of stream B.\r\nIt would be great if this paragraph transmitted this intuition.",
              "createdAt": "2023-08-23T13:55:40Z",
              "updatedAt": "2023-08-23T14:20:59Z"
            },
            {
              "originalPosition": 12,
              "body": "\"application may encode their different message types within `FramedContent.application_data`\"?",
              "createdAt": "2023-08-23T14:01:12Z",
              "updatedAt": "2023-08-23T14:20:59Z"
            },
            {
              "originalPosition": 43,
              "body": "Note that `stream_id` isn't authenticated in the message signature (unlike `wire_format` which is present in `FramedContentTBS`).\r\nIt might not be a problem since it is included in the key schedule, but I'm not sure about that.",
              "createdAt": "2023-08-23T14:05:29Z",
              "updatedAt": "2023-08-23T14:20:59Z"
            },
            {
              "originalPosition": 90,
              "body": "What is the LeafNode extension?",
              "createdAt": "2023-08-23T14:11:48Z",
              "updatedAt": "2023-08-23T14:20:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHZoI5M5k0fkq",
          "commit": {
            "abbreviatedOid": "fc1d961"
          },
          "author": "rohan-wire",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-22T19:41:35Z",
          "updatedAt": "2023-10-22T19:41:36Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "I agree with TWal. A slightly less vague example would help a lot in the intro.\r\n\r\n\"For example, one message stream might be used for frequent bulk-priority messages, while another is used for infrequent urgent notifications. This would allow a client after a network outage to decrypt the urgent stream immediately while still decrypting bulk-priority messages.\"\r\n\r\nWhat happens with the handshake messages is still not clear though. If there are lots of adds and joins in the group, the client will still need to process all of the commits and all the ratchets will need to change anyway right? ",
              "createdAt": "2023-10-22T19:41:35Z",
              "updatedAt": "2023-10-22T19:41:36Z"
            }
          ]
        }
      ]
    },
    {
      "number": 19,
      "id": "PR_kwDOHZoI5M5c6JYX",
      "title": "Safe extensions",
      "url": "https://github.com/mlswg/mls-extensions/pull/19",
      "state": "MERGED",
      "author": "kkohbrok",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This PR is joint work with @mulmarta, @raphaelrobert and @psyoptix. It includes a brief section on general guidance, as well as the \u201csafe extension API\u201d.\r\n\r\n(The following text was also sent to the MLS WG mailing list.)\r\n\r\nThe extension developer guidance section gives a brief overview over the different places in which MLS is extensible (GroupInfo, GroupContext, etc.) and what properties MLS can provide for extensions in each of those places. There is nothing that can\u2019t be gleaned from the MLS specification or the architecture doc, but it might be a helpful summary for extension designers.\r\n\r\nThe main contribution of the PR is the safe extension API. The MLS specification doesn\u2019t place any restrictions on what extensions can and can\u2019t do, which means that in particular extensions can invalidate any and all of the security guarantees MLS and other extensions provide. While in some cases it makes sense for an extension to interfere with the main protocol mechanics, for the majority of extensions controlled access to a subset of the functionalities provided by MLS should be sufficient. The safe extensions API describes an interface that extensions can use to make use of functionalities like exporters, PSK injection, public key encryption, signatures, etc. without invalidating the privacy, authenticity and agreement properties of MLS. Similarly, extensions that only use this API do not interfere with any other extensions which only use this API. We call extensions that only use this API \u201csafe extensions\u201d.\r\n\r\nFor the most part, this is achieved through proper domain separation both between extensions and the MLS protocol, as well as between extensions.\r\n\r\nAs part of the API, the PR defines generic proposals, wire formats and credentials that can be safely used by extension developers. These definitions also mean that an extension developer won\u2019t have to request IANA code points for any additional structs besides the extension itself.\r\n\r\nThe PR also provides two examples of safe extensions: The first example is a simple RBAC extension that keeps state externally. Note that there are many ways to implement RBAC and this is just an example (which will be modified in a later PR, see below). The second example is the already existing Targeted Messages extension, which we have adapted to use the safe extension API.\r\n\r\nFinally, we want to note that this PR is only step one. In the next step, we want to provide a safe way of reading and writing to (the state of) GroupContext extensions beyond a group context extension proposal. We felt that the PR had already gotten quite big and we wanted to put it up for discussion in time for a fresh draft of the extension doc before IETF 118.\r\n",
      "createdAt": "2023-10-16T14:41:39Z",
      "updatedAt": "2023-10-23T15:32:22Z",
      "baseRepository": "mlswg/mls-extensions",
      "baseRefName": "main",
      "baseRefOid": "742d47630452bcbd29e0358a7b4d5259a6e36689",
      "headRepository": "kkohbrok/mls-extensions",
      "headRefName": "safe_extensions",
      "headRefOid": "abf3b8dbc6c86ff996c1669e0d701dcde3046db7",
      "closedAt": "2023-10-23T15:32:21Z",
      "mergedAt": "2023-10-23T15:32:21Z",
      "mergedBy": "raphaelrobert",
      "mergeCommit": {
        "oid": "b011453895150b35a7c5ff9701c4754a7a70a54d"
      },
      "comments": [
        {
          "author": "TWal",
          "authorAssociation": "NONE",
          "body": "It's a good idea -- it would be a shame if an extension reduced the security of MLS!\r\n\r\nI only skimmed through it, but I do have a few remarks.\r\n\r\nTo ensure disambiguation between signatures / HPKE encryptions / exported secrets, we created a IANA registry for their labels, to ensure an extension doesn't reuse a label defined in MLS, or defined in another extension.\r\nThe safe extension API do use these labels (and update the IANA registry) to define new \"safe\" versions of these functions, but then I think we then need another IANA registry to ensure two extensions don't use the same label e.g. for `SafeSignWithLabel` (same for other \"safe\" functions).\r\n\r\nAnd a small nit, `VerifyWithLabel` / `SignWithLabel` are always used with a label consisting of the signature input type name (here, `LabeledExtensionContent`), although here it's used with the labels `ExtensionsDataTBS` and `ExtensionDataTBS` (which is a bug by the way!)",
          "createdAt": "2023-10-16T15:51:19Z",
          "updatedAt": "2023-10-16T15:51:19Z"
        },
        {
          "author": "psyoptix",
          "authorAssociation": "CONTRIBUTOR",
          "body": "yup, domain separation between extensions is critical to achieve the Safe API's goals. the API does this using just the (IANA registered)  Extension Type. A safe extension must register its own Extension Type unique among all other safe extensions with IANA. That already gives us a unique number we can extend to domain separate all labels.\r\n\r\nFor example, for a safe extension to use HPKE the safe API enforces that the HPKE label is `LabeledExtensionContent` which contains the `ExtensionContent` which in turn has an `ExtensionType` field. As that value is different for each safe extension the full HPKE labels for different extensions is always distinct.\r\n\r\nThe same idea is used for all other extension defined labels in the safe API which means the only value a new extension must register with IANA is its Extension Type.",
          "createdAt": "2023-10-17T08:24:52Z",
          "updatedAt": "2023-10-17T08:25:08Z"
        },
        {
          "author": "kkohbrok",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> And a small nit, `VerifyWithLabel` / `SignWithLabel` are always used with a label consisting of the signature input type name (here, `LabeledExtensionContent`), although here it's used with the labels `ExtensionsDataTBS` and `ExtensionDataTBS` (which is a bug by the way!)\r\n\r\nThanks for pointing this out! I've changed the labels accordingly.\r\n",
          "createdAt": "2023-10-17T08:58:52Z",
          "updatedAt": "2023-10-17T08:58:52Z"
        },
        {
          "author": "TWal",
          "authorAssociation": "NONE",
          "body": "Ah indeed, I didn't notice the extension type was included. My remark doesn't apply then, there is correct domain separation between extensions!",
          "createdAt": "2023-10-17T10:09:10Z",
          "updatedAt": "2023-10-17T10:09:10Z"
        },
        {
          "author": "rohan-wire",
          "authorAssociation": "CONTRIBUTOR",
          "body": "My overall reaction is that this is much more straightforward than I imagined when Jo\u00ebl described the idea. \r\nI'll just emphasize again to please make our PRs small and atomic. Updating Targeted messages to use Safe Extensions, and RBAC should be in separate PRs. \r\n\r\nThe IANA Considerations and Security Considerations section need to be one top-level section with level-2 headings. You should also add a paragraph under the top-level Contributors section",
          "createdAt": "2023-10-22T19:16:20Z",
          "updatedAt": "2023-10-22T19:16:20Z"
        },
        {
          "author": "kkohbrok",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thinking some more about it, I think updating the targeted messages extension in this PR should be fine since it's just an update, not a change in its semantics. I have removed the RBAC extension, though. We won't create a PR for it right now, but we might re-use it as an example for our next pass over the safe extensions API.\r\n\r\nI also updated the section on proposals, to allow \"safe\" definition of proposals for external commits. Generally, there is still some work to be done on what it means for a proposal to be safe, but that, too, we'll save for the next iteration.",
          "createdAt": "2023-10-23T13:00:52Z",
          "updatedAt": "2023-10-23T13:00:52Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHZoI5M5k0eaC",
          "commit": {
            "abbreviatedOid": "756c5c7"
          },
          "author": "rohan-wire",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2023-10-22T18:58:36Z",
          "updatedAt": "2023-10-22T19:09:47Z",
          "comments": [
            {
              "originalPosition": 214,
              "body": "I think it is unclear from the \"K\" is PSK to most readers what the implications are what kind of \"shared file\" can be a PSK. Could I include a MIMI policy document as a PSK for example? ",
              "createdAt": "2023-10-22T18:58:36Z",
              "updatedAt": "2023-10-22T19:09:47Z"
            },
            {
              "originalPosition": 281,
              "body": "```suggestion\r\nrequires no UpdatePath and can not be sent by an external sender\r\nextension_path_proposal requires an UpdatePath and can not be sent by an external\r\nsender extensions_external_proposal requires no UpdatePath and can be sent by an\r\n```",
              "createdAt": "2023-10-22T19:02:39Z",
              "updatedAt": "2023-10-22T19:09:47Z"
            },
            {
              "originalPosition": 358,
              "body": "```suggestion\r\n  the same lifecycle. However, they are also part of any commit that includes an\r\n  UpdatePath and clients generally have a leaf node in each group they are a member\r\n```",
              "createdAt": "2023-10-22T19:04:37Z",
              "updatedAt": "2023-10-22T19:09:47Z"
            },
            {
              "originalPosition": 583,
              "body": "Could we please make this PR exclusive to safe extensions, and split-out a separate PR for RBAC (which I also support)?",
              "createdAt": "2023-10-22T19:07:47Z",
              "updatedAt": "2023-10-22T19:09:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHZoI5M5k1rz2",
          "commit": {
            "abbreviatedOid": "cd98b9d"
          },
          "author": "kkohbrok",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "Thanks for the review!\r\n\r\nThe idea behind the inclusion of the two extensions was to showcase the use of the safe API. We can split them from this PR once we have agreed on the details of the safe API.",
          "createdAt": "2023-10-23T06:33:53Z",
          "updatedAt": "2023-10-23T06:42:33Z",
          "comments": [
            {
              "originalPosition": 214,
              "body": "Good point! I've updated the text to elaborate a bit more on what the PSK mechanism can be used for.",
              "createdAt": "2023-10-23T06:33:53Z",
              "updatedAt": "2023-10-23T06:35:51Z"
            },
            {
              "originalPosition": 583,
              "body": "The RBAC extensions was meant as an example for use of the safe API. I'd be happy to move it to a separate PR. @psyoptix any thoughts?",
              "createdAt": "2023-10-23T06:35:39Z",
              "updatedAt": "2023-10-23T06:35:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHZoI5M5k52Ha",
          "commit": {
            "abbreviatedOid": "abf3b8d"
          },
          "author": "raphaelrobert",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-10-23T15:31:23Z",
          "updatedAt": "2023-10-23T15:31:23Z",
          "comments": []
        }
      ]
    },
    {
      "number": 20,
      "id": "PR_kwDOHZoI5M5deKTQ",
      "title": "Add SelfRemove proposal to MLS extensions",
      "url": "https://github.com/mlswg/mls-extensions/pull/20",
      "state": "MERGED",
      "author": "rohan-wire",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "As discussed during IETF 117, this PR corresponds to the text from draft-mahy-mls-selfremove.\r\n",
      "createdAt": "2023-10-22T20:15:29Z",
      "updatedAt": "2023-10-23T19:10:02Z",
      "baseRepository": "mlswg/mls-extensions",
      "baseRefName": "main",
      "baseRefOid": "e3cca8ad712311bb66394217c02241244b632d70",
      "headRepository": "rohan-wire/mls-extensions",
      "headRefName": "rohan/selfremove",
      "headRefOid": "2761ac72995d45d6b357da7623b51a22d1d3ad65",
      "closedAt": "2023-10-23T19:10:02Z",
      "mergedAt": "2023-10-23T19:10:02Z",
      "mergedBy": "raphaelrobert",
      "mergeCommit": {
        "oid": "eda23582f4203c824ae863eab17e1e1526862fa8"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHZoI5M5k22Ky",
          "commit": {
            "abbreviatedOid": "adda81f"
          },
          "author": "kkohbrok",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "A very useful extension and the PR looks good in general.\r\n\r\nI left a few comments inline. Also, the text should probably be wrapped to 80(?) characters.\r\n",
          "createdAt": "2023-10-23T09:30:07Z",
          "updatedAt": "2023-10-23T09:42:54Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "The first of these three sentences seems to be the conclusion of the second and third. Maybe change up the order a bit?",
              "createdAt": "2023-10-23T09:30:07Z",
              "updatedAt": "2023-10-23T09:42:54Z"
            },
            {
              "originalPosition": 35,
              "body": "```suggestion\r\nto monitor the group and send a new Remove Proposal in every new epoch until the member is\r\n```",
              "createdAt": "2023-10-23T09:31:03Z",
              "updatedAt": "2023-10-23T09:42:54Z"
            },
            {
              "originalPosition": 50,
              "body": "```suggestion\r\nare an empty struct). It is allowed in External Commits and requires an UpdatePath.\r\n```\r\nThis should be plural, shouldn't it?",
              "createdAt": "2023-10-23T09:32:24Z",
              "updatedAt": "2023-10-23T09:42:54Z"
            },
            {
              "originalPosition": 76,
              "body": "```suggestion\r\nAn MLS client which supports this extension can send a\r\n```",
              "createdAt": "2023-10-23T09:33:14Z",
              "updatedAt": "2023-10-23T09:42:54Z"
            },
            {
              "originalPosition": 81,
              "body": "```suggestion\r\nas MLS PublicMessages.\r\n```",
              "createdAt": "2023-10-23T09:33:46Z",
              "updatedAt": "2023-10-23T09:42:54Z"
            },
            {
              "originalPosition": 88,
              "body": "\"embedded\" (at least to me) implies that it's by-value. Maybe\r\n```suggestion\r\nWhen a member receives a Commit referencing one or more SelfRemove Proposals,\r\n```",
              "createdAt": "2023-10-23T09:36:08Z",
              "updatedAt": "2023-10-23T09:42:54Z"
            },
            {
              "originalPosition": 97,
              "body": "```suggestion\r\nmore SelfRemove proposals). The new joiner MUST validate the SelfRemove\r\n```",
              "createdAt": "2023-10-23T09:37:15Z",
              "updatedAt": "2023-10-23T09:42:54Z"
            },
            {
              "originalPosition": 106,
              "body": "```suggestion\r\nThe MLS Delivery Service (DS) needs to validate SelfRemove Proposals it\r\n```",
              "createdAt": "2023-10-23T09:37:50Z",
              "updatedAt": "2023-10-23T09:42:54Z"
            },
            {
              "originalPosition": 106,
              "body": "\"needs to\" maybe this should be \"SHOULD\"?",
              "createdAt": "2023-10-23T09:38:13Z",
              "updatedAt": "2023-10-23T09:42:54Z"
            },
            {
              "originalPosition": 111,
              "body": "This is a bit unclear to me. What does it mean for a client to be prepared?",
              "createdAt": "2023-10-23T09:39:10Z",
              "updatedAt": "2023-10-23T09:42:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHZoI5M5k6dyU",
          "commit": {
            "abbreviatedOid": "adda81f"
          },
          "author": "rohan-wire",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-23T16:52:44Z",
          "updatedAt": "2023-10-23T16:52:44Z",
          "comments": [
            {
              "originalPosition": 111,
              "body": "```suggestion\r\nAs with Remove proposals, clients need to be able to receive a Commit\r\n```",
              "createdAt": "2023-10-23T16:52:44Z",
              "updatedAt": "2023-10-23T16:52:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHZoI5M5k6eas",
          "commit": {
            "abbreviatedOid": "adda81f"
          },
          "author": "rohan-wire",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-23T16:53:40Z",
          "updatedAt": "2023-10-23T16:53:40Z",
          "comments": [
            {
              "originalPosition": 49,
              "body": "```suggestion\r\nis described using the TLS Presentation Language [@!RFC8446] below (its content\r\n```",
              "createdAt": "2023-10-23T16:53:40Z",
              "updatedAt": "2023-10-23T16:53:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHZoI5M5k6euP",
          "commit": {
            "abbreviatedOid": "adda81f"
          },
          "author": "rohan-wire",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-23T16:54:28Z",
          "updatedAt": "2023-10-23T16:54:28Z",
          "comments": [
            {
              "originalPosition": 81,
              "body": "```suggestion\r\nin an MLS PublicMessage.\r\n```",
              "createdAt": "2023-10-23T16:54:28Z",
              "updatedAt": "2023-10-23T16:54:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHZoI5M5k6fID",
          "commit": {
            "abbreviatedOid": "adda81f"
          },
          "author": "rohan-wire",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-23T16:55:28Z",
          "updatedAt": "2023-10-23T16:55:28Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "```suggestion\r\nan MLS group from removing itself immediately from the group. (To cause\r\n```",
              "createdAt": "2023-10-23T16:55:28Z",
              "updatedAt": "2023-10-23T16:55:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHZoI5M5k6fWX",
          "commit": {
            "abbreviatedOid": "adda81f"
          },
          "author": "rohan-wire",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-23T16:55:54Z",
          "updatedAt": "2023-10-23T16:55:54Z",
          "comments": [
            {
              "originalPosition": 29,
              "body": "```suggestion\r\nnew epoch and therefore needs to be part of the group.) Instead a member\r\n```",
              "createdAt": "2023-10-23T16:55:54Z",
              "updatedAt": "2023-10-23T16:55:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHZoI5M5k6qip",
          "commit": {
            "abbreviatedOid": "f1820e0"
          },
          "author": "kkohbrok",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-10-23T17:21:39Z",
          "updatedAt": "2023-10-23T17:21:39Z",
          "comments": []
        }
      ]
    },
    {
      "number": 21,
      "id": "PR_kwDOHZoI5M5di--h",
      "title": "Add contributors and update changelog",
      "url": "https://github.com/mlswg/mls-extensions/pull/21",
      "state": "MERGED",
      "author": "raphaelrobert",
      "authorAssociation": "MEMBER",
      "assignees": [
        "raphaelrobert"
      ],
      "labels": [],
      "body": "",
      "createdAt": "2023-10-23T15:42:47Z",
      "updatedAt": "2023-10-23T15:45:40Z",
      "baseRepository": "mlswg/mls-extensions",
      "baseRefName": "main",
      "baseRefOid": "b011453895150b35a7c5ff9701c4754a7a70a54d",
      "headRepository": "mlswg/mls-extensions",
      "headRefName": "contributors",
      "headRefOid": "2c412b10eefc936095742c678c93bd9427d08a93",
      "closedAt": "2023-10-23T15:45:40Z",
      "mergedAt": "2023-10-23T15:45:40Z",
      "mergedBy": "raphaelrobert",
      "mergeCommit": {
        "oid": "e3cca8ad712311bb66394217c02241244b632d70"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 23,
      "id": "PR_kwDOHZoI5M5fSFlP",
      "title": "fix extension id for last resort extension",
      "url": "https://github.com/mlswg/mls-extensions/pull/23",
      "state": "MERGED",
      "author": "kkohbrok",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-11-13T10:15:49Z",
      "updatedAt": "2024-03-20T10:38:56Z",
      "baseRepository": "mlswg/mls-extensions",
      "baseRefName": "main",
      "baseRefOid": "eda23582f4203c824ae863eab17e1e1526862fa8",
      "headRepository": "kkohbrok/mls-extensions",
      "headRefName": "konrad/fix_last_resort_id",
      "headRefOid": "e1a00dacc80676021c5d17593f222d9812ee7d60",
      "closedAt": "2024-03-20T10:38:56Z",
      "mergedAt": "2024-03-20T10:38:56Z",
      "mergedBy": "raphaelrobert",
      "mergeCommit": {
        "oid": "fad299d873ae690083818182889c2140426c8100"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 26,
      "id": "PR_kwDOHZoI5M5tKoEl",
      "title": "include definition of `ExtensionState` extension",
      "url": "https://github.com/mlswg/mls-extensions/pull/26",
      "state": "MERGED",
      "author": "kkohbrok",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This PR is joint work with @psyoptix, @mulmarta and @raphaelrobert.",
      "createdAt": "2024-04-19T12:34:14Z",
      "updatedAt": "2024-10-08T06:46:26Z",
      "baseRepository": "mlswg/mls-extensions",
      "baseRefName": "main",
      "baseRefOid": "fad299d873ae690083818182889c2140426c8100",
      "headRepository": "kkohbrok/mls-extensions",
      "headRefName": "konrad/extension_storage",
      "headRefOid": "ec68d2dc9129b25c97aa98c02f23df65f18443d5",
      "closedAt": "2024-07-22T14:35:17Z",
      "mergedAt": "2024-07-22T14:35:17Z",
      "mergedBy": "raphaelrobert",
      "mergeCommit": {
        "oid": "14332f7f5894c974e198f8de97bc717b2f6c6c9d"
      },
      "comments": [
        {
          "author": "rohanmahy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Hi, @kkohbrok @psyoptix @mulmarta I realize that this has been approved, however I think it conflates three things:\r\n- making GroupContext items that are hidden from non-members. This should be encrypted somehow rather than hashed. Hashing just pushes the problem of getting the context somewhere else\r\n- the ability to patch the GroupContext is a problem we are also trying to solve with the (App)Sync proposal. Again, we don't want a hash here.\r\n- incorporating GroupState for which the master copy of this data is elsewhere, but we want to have agreement on it. This is a great use of a hash. ",
          "createdAt": "2024-10-07T17:34:14Z",
          "updatedAt": "2024-10-07T17:34:14Z"
        },
        {
          "author": "kkohbrok",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'm not sure I understand what you're suggesting here. A couple of points:\r\n\r\n- ExtensionState allows (safe) extensions to safely anchor state in the group context. As such it's a \"lower-level\" mechanism than AppSync as it's meant to be used by extensions (such as AppSync) rather than an application running on top of MLS. \r\n- ExtensionState doesn't preclude extensions from storing encrypted data. I agree that hashing isn't necessarily the best way to limit visibility, mostly because the hash might leak data to the DS. I'd be okay with removing that sentence. However, as you point out using ExtensionState to anchor data in hash form is still useful.\r\n- ExtensionState doesn't prescribe how individual extensions should patch their data. That's by design, as we assume that the extension will handle that in some other way, for example, via extension-defined proposals. So there's no redundancy with what AppSync is trying to do.",
          "createdAt": "2024-10-08T06:46:25Z",
          "updatedAt": "2024-10-08T06:46:25Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 27,
      "id": "PR_kwDOHZoI5M5td5ws",
      "title": "group context extension update proposal",
      "url": "https://github.com/mlswg/mls-extensions/pull/27",
      "state": "CLOSED",
      "author": "franziskuskiefer",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "A proposal type to update rather than replace group context extensions.\r\nThis is somewhat related to #26 as it allows to update extension data more efficiently.",
      "createdAt": "2024-04-23T12:05:21Z",
      "updatedAt": "2024-10-21T13:23:54Z",
      "baseRepository": "mlswg/mls-extensions",
      "baseRefName": "main",
      "baseRefOid": "fad299d873ae690083818182889c2140426c8100",
      "headRepository": "franziskuskiefer/mls-extensions",
      "headRefName": "gce-update",
      "headRefOid": "20c985d6ba0ef092528ac1c093f142b580308b35",
      "closedAt": "2024-10-21T13:23:53Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "cameronvoell",
          "authorAssociation": "NONE",
          "body": "This looks great so far. I have a few questions. \r\n\r\nCurrently [MLS RFC section 12.2-3.8](https://www.rfc-editor.org/rfc/rfc9420.html#section-12.2-3.8) specifies that a proposal list for a commit is invalid if it has more than one Group Context Extension Proposal.\r\n\r\n1. I'm guessing the same reasoning for that rule might mean that a commit can not have more than one \"gce_update\" proposal, is that correct?  \r\n\r\n2. Is it right to assume that a single commit could not contain both a \"gce_update\" proposal and the group context proposal?\r\n\r\n> When the extension exists in the group context, the values are extended with the values from the extension list item.\r\n\r\n3. For the above line, is it correct to say that the values for the extension that exists in group context are \"replaced by\" the values of the extension from the gce_update proposal, or does \"extended with\" mean something slightly different in this context?",
          "createdAt": "2024-04-26T17:06:32Z",
          "updatedAt": "2024-04-26T17:06:32Z"
        },
        {
          "author": "franziskuskiefer",
          "authorAssociation": "NONE",
          "body": "> * I'm guessing the same reasoning for that rule might mean that a commit can not have more than one \"gce_update\" proposal, is that correct?\r\n> * Is it right to assume that a single commit could not contain both a \"gce_update\" proposal and the group context proposal?\r\n\r\nGood points. Yes, I'll add validation rules like this here. In particular:\r\nA commit is invalid if it contains more than one `gce_update` proposal, or a `gce_update` and `group_context_extensions`.\r\n\r\n> 3\\. For the above line, is it correct to say that the values for the extension that exists in group context are \"replaced by\" the values of the extension from the gce_update proposal, or does \"extended with\" mean something slightly different in this context?\r\n\r\nThe extension values are merged. This should be more specific indeed. But the main point of this proposal is to not replace, but merge the values. What wording would you suggest?",
          "createdAt": "2024-04-29T18:22:39Z",
          "updatedAt": "2024-04-29T18:22:39Z"
        },
        {
          "author": "raphaelrobert",
          "authorAssociation": "MEMBER",
          "body": "@franziskuskiefer This was never presented/discussed on list or at a meeting. Is this still something you want to get in?",
          "createdAt": "2024-07-22T14:38:12Z",
          "updatedAt": "2024-07-22T14:38:12Z"
        },
        {
          "author": "rohanmahy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This extension suffers from two problems:\r\n- no way to distinguish between updating an extension to be present with zero-length content, and an extension between completely removed\r\n- A single extension with very long content (for example, the MIMI participant list) also probably needs the ability to modify state within the extension.",
          "createdAt": "2024-10-07T18:28:27Z",
          "updatedAt": "2024-10-07T18:28:27Z"
        },
        {
          "author": "rohanmahy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> > * I'm guessing the same reasoning for that rule might mean that a commit can not have more than one \"gce_update\" proposal, is that correct?\r\n\r\nIt seems perfectly reasonable to have more than one gce_update proposal as long as the same extension is not referenced in more than one gce_update.\r\n\r\n> > * Is it right to assume that a single commit could not contain both a \"gce_update\" proposal and the group context proposal?\r\n\r\nagreed\r\n\r\n\r\n> Good points. Yes, I'll add validation rules like this here. In particular: A commit is invalid if it contains more than one `gce_update` proposal, or a `gce_update` and `group_context_extensions`.\r\n> \r\n> > 3. For the above line, is it correct to say that the values for the extension that exists in group context are \"replaced by\" the values of the extension from the gce_update proposal, or does \"extended with\" mean something slightly different in this context?\r\n> \r\n> The extension values are merged. This should be more specific indeed. But the main point of this proposal is to not replace, but merge the values. What wording would you suggest?\r\n\r\nfor a given extension, you should be able to add a value, update its value, or remove the extension.\r\n\r\n",
          "createdAt": "2024-10-07T20:41:14Z",
          "updatedAt": "2024-10-07T20:41:14Z"
        },
        {
          "author": "franziskuskiefer",
          "authorAssociation": "NONE",
          "body": "Oh I totally lost track of this one.\r\nI agree @rohanmahy that this isn't fully fleshed out. Seeing that #26 got merged I think the question is if #26 is doing the right thing and if it may cover the use case here as well. Or if it's better to have a more light weight mechanism. In any case would this one need to be adapted to work in the context of #26.",
          "createdAt": "2024-10-08T06:07:49Z",
          "updatedAt": "2024-10-08T06:07:49Z"
        },
        {
          "author": "raphaelrobert",
          "authorAssociation": "MEMBER",
          "body": "In that case, I'll close this for now. Feel free to open it again, if and when you start working on it.",
          "createdAt": "2024-10-21T13:23:54Z",
          "updatedAt": "2024-10-21T13:23:54Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 28,
      "id": "PR_kwDOHZoI5M5ywcR9",
      "title": "Add ability to export SafeSignature public key",
      "url": "https://github.com/mlswg/mls-extensions/pull/28",
      "state": "CLOSED",
      "author": "rohanmahy",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I added a PR which allows a Safe Extensions API user to export the public key corresponding to the SafeSignature private key.",
      "createdAt": "2024-06-17T23:53:20Z",
      "updatedAt": "2024-07-22T14:36:02Z",
      "baseRepository": "mlswg/mls-extensions",
      "baseRefName": "main",
      "baseRefOid": "fad299d873ae690083818182889c2140426c8100",
      "headRepository": "rohanmahy/mls-extensions",
      "headRefName": "rohan/export-sigpubkey",
      "headRefOid": "12d4adf30e82c0d8ffa4cfb9eb069cfa596d0eb0",
      "closedAt": "2024-07-22T14:36:02Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "raphaelrobert",
          "authorAssociation": "MEMBER",
          "body": "As discussed offline, this PR does not make sense.",
          "createdAt": "2024-07-22T14:36:02Z",
          "updatedAt": "2024-07-22T14:36:02Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 29,
      "id": "PR_kwDOHZoI5M5ywdLy",
      "title": "Add safe use of AAD to Safe Extensions framework",
      "url": "https://github.com/mlswg/mls-extensions/pull/29",
      "state": "MERGED",
      "author": "rohanmahy",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Incorporate AAD in the safe extensions framework to make a safe muxing of potentially multiple sources of authenticated_data",
      "createdAt": "2024-06-17T23:57:11Z",
      "updatedAt": "2025-01-31T16:48:27Z",
      "baseRepository": "mlswg/mls-extensions",
      "baseRefName": "main",
      "baseRefOid": "14332f7f5894c974e198f8de97bc717b2f6c6c9d",
      "headRepository": "rohanmahy/mls-extensions",
      "headRefName": "rohan/safe-aad",
      "headRefOid": "61119e49e3835109da73acc1368c1fa6c830142d",
      "closedAt": "2024-10-21T15:55:07Z",
      "mergedAt": "2024-10-21T15:55:07Z",
      "mergedBy": "raphaelrobert",
      "mergeCommit": {
        "oid": "f880364d4e1adfa0166e12bedfa719a7f25ca5fe"
      },
      "comments": [
        {
          "author": "kkohbrok",
          "authorAssociation": "CONTRIBUTOR",
          "body": "It's been a while since we discussed this. @rohanmahy did you want to add a brief discussion noting that in contrast to other safe extension framework features, the use of the AAD is a little different, because the application can typically also just use the AAD? I know we discussed this but I can't remember what we decided on.",
          "createdAt": "2024-07-22T14:36:02Z",
          "updatedAt": "2024-07-22T14:36:02Z"
        },
        {
          "author": "rohanmahy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Hi, if two extensions (safe or not) want to add AAD, there needs to be a way to mux and demux that data. I'm open to suggestions about what additional text you'd like added.",
          "createdAt": "2024-07-22T16:18:54Z",
          "updatedAt": "2024-07-22T16:18:54Z"
        },
        {
          "author": "kkohbrok",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I guess my question is how the implementation would know when to expect a SafeAAD item in the `authenticated_data` field. We probably need a rule that says something like: \"If there is an extension (probably a group context extension) that sometimes makes use of the AAD field, then there MUST always be a SafeAAD item in `authenticated_data`, even if it's empty. Does that make sense? Otherwise the implementation won't know if it's parsing for a SafeAAD item or the application's (unsafe) AAD.",
          "createdAt": "2024-07-23T06:49:10Z",
          "updatedAt": "2024-07-23T06:49:10Z"
        },
        {
          "author": "rohanmahy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> I guess my question is how the implementation would know when to expect a SafeAAD item in the `authenticated_data` field. We probably need a rule that says something like: \"If there is an extension (probably a group context extension) that sometimes makes use of the AAD field, then there MUST always be a SafeAAD item in `authenticated_data`, even if it's empty. Does that make sense? Otherwise the implementation won't know if it's parsing for a SafeAAD item or the application's (unsafe) AAD.\r\n\r\nI think there needs to be a SafeAAD GC extension. If it exists in a group, the first octet(s) of the AAD is/are the length of the SafeAAD vector (which could be zero). If there is any AAD left after that, it is non-Safe AAD.\r\n\r\nIs that concept OK?",
          "createdAt": "2024-07-23T16:41:59Z",
          "updatedAt": "2024-07-23T16:41:59Z"
        },
        {
          "author": "kkohbrok",
          "authorAssociation": "CONTRIBUTOR",
          "body": "That sounds good. Could you add/clarify that in the PR?",
          "createdAt": "2024-07-23T19:01:44Z",
          "updatedAt": "2024-07-23T19:01:44Z"
        },
        {
          "author": "raphaelrobert",
          "authorAssociation": "MEMBER",
          "body": "Let's get this in. @rohanmahy can you please resolve the conflict?",
          "createdAt": "2024-10-21T13:25:42Z",
          "updatedAt": "2024-10-21T13:25:42Z"
        },
        {
          "author": "rohanmahy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Let's get this in. @rohanmahy can you please resolve the conflict?\r\n\r\nDone!",
          "createdAt": "2024-10-21T14:05:52Z",
          "updatedAt": "2024-10-21T14:05:52Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHZoI5M6NMdBn",
          "commit": {
            "abbreviatedOid": "612071f"
          },
          "author": "kkohbrok",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Thanks, looks good to me!",
          "createdAt": "2024-10-15T10:21:42Z",
          "updatedAt": "2024-10-15T10:21:42Z",
          "comments": []
        }
      ]
    },
    {
      "number": 31,
      "id": "PR_kwDOHZoI5M59q-RU",
      "title": "Clarify how capabilities negotiation works in Safe Extensions framework.",
      "url": "https://github.com/mlswg/mls-extensions/pull/31",
      "state": "CLOSED",
      "author": "rohanmahy",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Note: this diff is easier to read when viewed as diffs for its separate commits. The first Commit is just a plain move of one section.\r\n\r\n- Moved the text in \"Storing State in Extensions\" earlier and renamed\r\n- describe the original \"ExtensionTypes\" as \"Core struct extensions\"\r\n- added a section on capabilities handling and negotiation\r\n- instruct IANA to add a \"Safe\" column to \"MLS Extension Types\"\r\n- instruct IANA that a safe extension can have N/A in the Message(s) column.",
      "createdAt": "2024-10-04T21:45:42Z",
      "updatedAt": "2025-01-31T16:48:25Z",
      "baseRepository": "mlswg/mls-extensions",
      "baseRefName": "main",
      "baseRefOid": "f880364d4e1adfa0166e12bedfa719a7f25ca5fe",
      "headRepository": "rohanmahy/mls-extensions",
      "headRefName": "ext-types",
      "headRefOid": "99a317cb3d1d8c186984f9c148d07f5987b045a5",
      "closedAt": "2024-10-21T16:36:37Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "rohanmahy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Is there a reason you want the extension WireFormat, Proposal, etc. to be part of the safe extension API? \r\n\r\nYes! Safe WireFormats, Safe Proposals, and Safe Credentials share the `mls-extension_message`, `extension*proposal`, and `extension_credential` types respectively;  all of these MUST use the ExtensionContent struct; and all of them use the capabilities negotiation I described. The whole reason I wrote this PR was because it was simply not possible to write rules for safe extension of one these types without stepping into rules that should be defined in the framework.\r\n\r\n>Our thinking was to keep it separate, because *it* [my emphasis] might also be useful for non-safe extensions.\r\n\r\nI'm not sure what the *it* is. RFC9420 already says what you need to do for non-safe extensions of these types. If the creator of a non-safe extension wants to reuse some structs defined the Safe Extensions framework, I don't see any problem with this, but they absolutely MUST NOT use the IANA registered `mls-extension_message`, `extension*proposal`, and `extension_credential` types.  If you wanted to make it easier to find/reference the `ExtensionState` struct for example, I would suggest we get this PR merged and then we can have a clean PR proposing the move. Otherwise the conflicts get ugly and the PR is harder to review.",
          "createdAt": "2024-10-11T14:44:41Z",
          "updatedAt": "2024-10-11T14:44:41Z"
        },
        {
          "author": "kkohbrok",
          "authorAssociation": "CONTRIBUTOR",
          "body": "What I meant was: Why shouldn't unsafe extension authors make use of mls-extension_message, extension*proposal and extension_credential? Is there a safety or a negotiation consideration I'm not seeing?",
          "createdAt": "2024-10-14T07:13:14Z",
          "updatedAt": "2024-10-14T07:13:14Z"
        },
        {
          "author": "rohanmahy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "They shouldn't use those types because that is how the stack of some *other\r\nclient*  knows that the (to it unknown) extension is safe or not.\r\n\r\nOn Mon, Oct 14, 2024, 00:13 Konrad Kohbrok ***@***.***> wrote:\r\n\r\n> What I meant was: Why shouldn't unsafe extension authors make use of\r\n> mls-extension_message, extension*proposal and extension_credential? Is\r\n> there a safety or a negotiation consideration I'm not seeing?\r\n>\r\n> \u2014\r\n> Reply to this email directly, view it on GitHub\r\n> <https://github.com/mlswg/mls-extensions/pull/31#issuecomment-2410227732>,\r\n> or unsubscribe\r\n> <https://github.com/notifications/unsubscribe-auth/AADSQPTKANLMJRH6AU2SCATZ3NVKBAVCNFSM6AAAAABPMU4X72VHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMZDIMJQGIZDONZTGI>\r\n> .\r\n> You are receiving this because you authored the thread.Message ID:\r\n> ***@***.***>\r\n>\r\n",
          "createdAt": "2024-10-14T11:27:10Z",
          "updatedAt": "2024-10-14T11:27:10Z"
        },
        {
          "author": "kkohbrok",
          "authorAssociation": "CONTRIBUTOR",
          "body": "If the other client doesn't know the extension, how can its semantics (and thus its safety) be relevant to it?",
          "createdAt": "2024-10-14T12:58:30Z",
          "updatedAt": "2024-10-14T12:58:30Z"
        },
        {
          "author": "rohanmahy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "1) So it can ignore them safely\r\n2) If it is a Safe Extension, the stack could conceivably pass it to the consumer of the stack to implement the safe extension.\r\n\r\nOn Mon, Oct 14, 2024, 05:58 Konrad Kohbrok ***@***.***> wrote:\r\n\r\n> If the other client doesn't know the extension, how can its semantics (and\r\n> thus its safety) be relevant to it?\r\n>\r\n> \u2014\r\n> Reply to this email directly, view it on GitHub\r\n> <https://github.com/mlswg/mls-extensions/pull/31#issuecomment-2411164100>,\r\n> or unsubscribe\r\n> <https://github.com/notifications/unsubscribe-auth/AADSQPWEQ6XT7SZOGVTSZX3Z3O5Y3AVCNFSM6AAAAABPMU4X72VHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMZDIMJRGE3DIMJQGA>\r\n> .\r\n> You are receiving this because you authored the thread.Message ID:\r\n> ***@***.***>\r\n>\r\n",
          "createdAt": "2024-10-14T13:57:07Z",
          "updatedAt": "2024-10-14T14:30:55Z"
        },
        {
          "author": "kkohbrok",
          "authorAssociation": "CONTRIBUTOR",
          "body": "1) If an extension can't be safely ignored, it should be a required capability, shouldn't it?\r\n2) If the application wants to do anything with the extension, why wouldn't it signal support for it? Also, why would an application expect to be shown the data for safe extensions, but not for unsafe ones?",
          "createdAt": "2024-10-15T10:18:04Z",
          "updatedAt": "2024-10-15T10:18:04Z"
        },
        {
          "author": "rohanmahy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Safe Extensions has two main benefits:\r\n- Arbitrary combinations of safe extensions can be used together safely.\r\n- Because of that property, an MLS stack can also delegate implementation\r\nof safe extensions to the consumer of the stack, whereas it cannot with a\r\nnon-safe extension (even if it is not in required_capabilities).\r\n\r\n\r\nOn Tue, Oct 15, 2024, 03:18 Konrad Kohbrok ***@***.***> wrote:\r\n\r\n>\r\n>    1. If an extension can't be safely ignored, it should be a required\r\n>    capability, shouldn't it?\r\n>    2. If the application wants to do anything with the extension, why\r\n>    wouldn't it signal support for it? Also, why would an application expect to\r\n>    be shown the data for safe extensions, but not for unsafe ones?\r\n>\r\n> \u2014\r\n> Reply to this email directly, view it on GitHub\r\n> <https://github.com/mlswg/mls-extensions/pull/31#issuecomment-2413484893>,\r\n> or unsubscribe\r\n> <https://github.com/notifications/unsubscribe-auth/AADSQPVISXO3DMIVV3WODATZ3TTXFAVCNFSM6AAAAABPMU4X72VHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMZDIMJTGQ4DIOBZGM>\r\n> .\r\n> You are receiving this because you authored the thread.Message ID:\r\n> ***@***.***>\r\n>\r\n",
          "createdAt": "2024-10-15T11:25:35Z",
          "updatedAt": "2024-10-15T11:25:35Z"
        },
        {
          "author": "kkohbrok",
          "authorAssociation": "CONTRIBUTOR",
          "body": "In a scenario where the MLS implementation doesn't know the extension, i.e. it's not in the capabilities then why wouldn't the application show proposals, etc. to the application regardless whether the extension is safe or not? If the implementation of the unknown extension can't be delegated to the application, the extension really should have been in the required capabilities.",
          "createdAt": "2024-10-16T07:28:01Z",
          "updatedAt": "2024-10-16T07:28:01Z"
        },
        {
          "author": "rohanmahy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> In a scenario where the MLS implementation doesn't know the extension, i.e. it's not in the capabilities then why wouldn't the application show proposals, etc. to the application regardless whether the extension is safe or not? If the implementation of the unknown extension can't be delegated to the application, the extension really should have been in the required capabilities.\r\n\r\nLet's take the example of an AssociatedParties \"feature\". It has:\r\n- one GroupContext\r\n- 3 Proposals (adding, removing, and updating this GC)\r\n- A label for a new secret\r\n\r\nThe \"feature\" has a single ExtensionType say it is type 0xBEEF. The proposals are `extension_proposal`, `extension_path_proposal`, and `extension_path_proposal` types respectively. After each of these would be the ExtensionType 0xBEEF and then inside the extension_path_proposal, a selector in the TLS struct to select between the remove and update variants of the struct.",
          "createdAt": "2024-10-19T19:01:09Z",
          "updatedAt": "2024-10-19T19:01:09Z"
        },
        {
          "author": "kkohbrok",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I see what you're getting at. I think this an issue beyond safe extensions that we best discuss in the next meeting.",
          "createdAt": "2024-10-21T13:27:28Z",
          "updatedAt": "2024-10-21T13:27:28Z"
        },
        {
          "author": "rohanmahy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> I see what you're getting at. I think this an issue beyond safe extensions that we best discuss in the next meeting.\r\n\r\nI think the group will have a hard time reviewing it properly inside a PR. If we have consensus from the editors can we merge this to have something concrete to discuss?\r\n",
          "createdAt": "2024-10-21T13:32:10Z",
          "updatedAt": "2024-10-21T13:32:10Z"
        },
        {
          "author": "kkohbrok",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Looking at it more closely, maybe I don't understand what you're getting at. I understand the AP extension example and that's indeed how the mechanism is intended, but why can't we use the same mechanism (i.e. bundle multiple proposals, WireFormats, etc. behind a single extension type) with a non-safe extension?",
          "createdAt": "2024-10-21T13:44:45Z",
          "updatedAt": "2024-10-21T13:44:45Z"
        },
        {
          "author": "rohanmahy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Looking at it more closely, maybe I don't understand what you're getting at. I understand the AP extension example and that's indeed how the mechanism is intended, but why can't we use the same mechanism (i.e. bundle multiple proposals, WireFormats, etc. behind a single extension type) with a non-safe extension?\r\n\r\nI think we should be making it clear and easy to make safe extensions. The creator of a non-safe extension *could* use the same or similar mechanism, but we can't be prescriptive about what non-safe extension can and can't do. They don't *HAVE TO*. However for safe extensions we can say, they have to do a specific thing. That's why I don't particularly care to spend a lot of energy on considerations for non-safe extensions. It's not that I don't want non-safe extensions to do better, it's that they are free to ignore anything we do say now (the horse is already out of the barn).",
          "createdAt": "2024-10-21T13:59:06Z",
          "updatedAt": "2024-10-21T13:59:06Z"
        },
        {
          "author": "kkohbrok",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Fair enough, then I'm okay with this PR. \r\n\r\nI don't think, however, that just because an extension is safe, it can be safely ignored by both client and application. For example, if a client receives a commit with an extension proposal from a safe extension where the proposal is invalid according to the extension's semantics. A client that is knows the extension will consider the commit invalid. A client that doesn't will consider the commit invalid.",
          "createdAt": "2024-10-21T14:26:02Z",
          "updatedAt": "2024-10-21T14:26:02Z"
        },
        {
          "author": "rohanmahy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Fair enough, then I'm okay with this PR.\r\n\r\nGreat!\r\n\r\n> I don't think, however, that just because an extension is safe, it can be safely ignored by both client and application. For example, if a client receives a commit with an extension proposal from a safe extension where the proposal is invalid according to the extension's semantics. A client that is knows the extension will consider the commit invalid. A client that doesn't will consider the commit invalid.\r\n\r\nAgreed. All proposals used would have to be in required_capabilities because a member needs to be able to understand if they are valid or not.",
          "createdAt": "2024-10-21T14:28:21Z",
          "updatedAt": "2024-10-21T14:28:21Z"
        },
        {
          "author": "raphaelrobert",
          "authorAssociation": "MEMBER",
          "body": "Closing in favor of #36.",
          "createdAt": "2024-10-21T16:36:37Z",
          "updatedAt": "2024-10-21T16:36:37Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHZoI5M6MG3od",
          "commit": {
            "abbreviatedOid": "14cbae1"
          },
          "author": "Bren2010",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-10-06T22:08:16Z",
          "updatedAt": "2024-10-06T22:08:16Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHZoI5M6Mzpd7",
          "commit": {
            "abbreviatedOid": "14cbae1"
          },
          "author": "kkohbrok",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "I hadn't realized that we were missing the section on extension negotiation, so thanks for adding it.\r\n\r\nIs there a reason you want the extension WireFormat, Proposal, etc. to be part of the safe extension API? Our thinking was to keep it separate, because it might also be useful for non-safe extensions.",
          "createdAt": "2024-10-11T09:16:49Z",
          "updatedAt": "2024-10-11T09:16:49Z",
          "comments": []
        }
      ]
    },
    {
      "number": 32,
      "id": "PR_kwDOHZoI5M5-QuxO",
      "title": "placeholder GroupContext encryption mechanism",
      "url": "https://github.com/mlswg/mls-extensions/pull/32",
      "state": "CLOSED",
      "author": "rohanmahy",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This mechanism is a placeholder for encrypting individual GroupContext extensions for group members only. ",
      "createdAt": "2024-10-10T19:10:45Z",
      "updatedAt": "2025-01-31T16:07:07Z",
      "baseRepository": "mlswg/mls-extensions",
      "baseRefName": "main",
      "baseRefOid": "14332f7f5894c974e198f8de97bc717b2f6c6c9d",
      "headRepository": "rohanmahy/mls-extensions",
      "headRefName": "encrypted-groupcontext",
      "headRefOid": "9388b18ca5538b75195a7ba85f8a02d6250ab800",
      "closedAt": "2025-01-31T16:07:06Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Not covered by appsync.",
          "createdAt": "2025-01-23T18:21:04Z",
          "updatedAt": "2025-01-23T18:21:04Z"
        },
        {
          "author": "rohanmahy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "- if the information being encrypted is actually in an application component, this would no longer be an MLS \"extension\"\r\n- the solution is not general enough to include in this document",
          "createdAt": "2025-01-31T16:07:06Z",
          "updatedAt": "2025-01-31T16:07:06Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 35,
      "id": "PR_kwDOHZoI5M5_VUG1",
      "title": "Fix upload action",
      "url": "https://github.com/mlswg/mls-extensions/pull/35",
      "state": "MERGED",
      "author": "raphaelrobert",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-10-21T14:46:13Z",
      "updatedAt": "2024-10-21T14:49:07Z",
      "baseRepository": "mlswg/mls-extensions",
      "baseRefName": "main",
      "baseRefOid": "14332f7f5894c974e198f8de97bc717b2f6c6c9d",
      "headRepository": "mlswg/mls-extensions",
      "headRefName": "fix-upload-ci",
      "headRefOid": "df6a003556f4fd14e539fae590d401337d6d9c18",
      "closedAt": "2024-10-21T14:49:07Z",
      "mergedAt": "2024-10-21T14:49:06Z",
      "mergedBy": "raphaelrobert",
      "mergeCommit": {
        "oid": "c025ed8e958743881968f89d732cf4edc1f2d4dd"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 36,
      "id": "PR_kwDOHZoI5M5_WRAe",
      "title": "Clarify how capabilities negotiation works in Safe Extensions framework (redo)",
      "url": "https://github.com/mlswg/mls-extensions/pull/36",
      "state": "MERGED",
      "author": "rohanmahy",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Same thing as PR #31 without the merge conflicts.",
      "createdAt": "2024-10-21T16:27:44Z",
      "updatedAt": "2025-01-31T16:48:24Z",
      "baseRepository": "mlswg/mls-extensions",
      "baseRefName": "main",
      "baseRefOid": "f880364d4e1adfa0166e12bedfa719a7f25ca5fe",
      "headRepository": "rohanmahy/mls-extensions",
      "headRefName": "ext-types2",
      "headRefOid": "c1f2ca9e825ae1e780095b7f99e5ff9994d9b699",
      "closedAt": "2024-10-21T16:36:16Z",
      "mergedAt": "2024-10-21T16:36:16Z",
      "mergedBy": "raphaelrobert",
      "mergeCommit": {
        "oid": "02cbd2f7dfda3b6cee066f5640369bece487158f"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 37,
      "id": "PR_kwDOHZoI5M5_WsfT",
      "title": "draft-05",
      "url": "https://github.com/mlswg/mls-extensions/pull/37",
      "state": "MERGED",
      "author": "raphaelrobert",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-10-21T17:26:47Z",
      "updatedAt": "2024-10-21T17:35:54Z",
      "baseRepository": "mlswg/mls-extensions",
      "baseRefName": "main",
      "baseRefOid": "02cbd2f7dfda3b6cee066f5640369bece487158f",
      "headRepository": "mlswg/mls-extensions",
      "headRefName": "draft-05",
      "headRefOid": "a7a636088e110e9280a19f58bf2c7e2699602b3a",
      "closedAt": "2024-10-21T17:35:54Z",
      "mergedAt": "2024-10-21T17:35:54Z",
      "mergedBy": "raphaelrobert",
      "mergeCommit": {
        "oid": "348b7fe0cad9321751b969cb5d13aac86deedff5"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 38,
      "id": "PR_kwDOHZoI5M6AGLcL",
      "title": "add additional credential types",
      "url": "https://github.com/mlswg/mls-extensions/pull/38",
      "state": "MERGED",
      "author": "rohanmahy",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "- add multi and weak-multi credential types",
      "createdAt": "2024-10-28T12:48:36Z",
      "updatedAt": "2025-01-31T16:47:40Z",
      "baseRepository": "mlswg/mls-extensions",
      "baseRefName": "main",
      "baseRefOid": "4f2d0e818d862293c4016753d88df7fc68a93aa2",
      "headRepository": "rohanmahy/mls-extensions",
      "headRefName": "more-credentials",
      "headRefOid": "0bbc4c39ce96e29846af3cf3a3cb208d695d1ce4",
      "closedAt": "2025-01-28T18:42:29Z",
      "mergedAt": "2025-01-28T18:42:29Z",
      "mergedBy": "raphaelrobert",
      "mergeCommit": {
        "oid": "49b739cd05ec748432881270ac83cc3066f09b29"
      },
      "comments": [
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "As discussed at 20250123 interim, address Brendan's comments and then merge.  Also may be refactored as a result of appsync.",
          "createdAt": "2025-01-23T18:23:16Z",
          "updatedAt": "2025-01-23T18:23:16Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHZoI5M6PvA8K",
          "commit": {
            "abbreviatedOid": "7019bb8"
          },
          "author": "Bren2010",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-11-02T17:47:07Z",
          "updatedAt": "2024-11-02T17:52:02Z",
          "comments": [
            {
              "originalPosition": 131,
              "body": "```suggestion\r\n* Recommended: N\r\n```",
              "createdAt": "2024-11-02T17:47:07Z",
              "updatedAt": "2024-11-02T17:52:02Z"
            },
            {
              "originalPosition": 124,
              "body": "```suggestion\r\n* Recommended: N\r\n```",
              "createdAt": "2024-11-02T17:47:12Z",
              "updatedAt": "2024-11-02T17:52:02Z"
            },
            {
              "originalPosition": 63,
              "body": "Why would the ciphersuite not match? What is its purpose?",
              "createdAt": "2024-11-02T17:50:52Z",
              "updatedAt": "2024-11-02T17:52:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHZoI5M6ZOWiP",
          "commit": {
            "abbreviatedOid": "7019bb8"
          },
          "author": "Bren2010",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-23T18:23:58Z",
          "updatedAt": "2025-01-23T18:23:58Z",
          "comments": [
            {
              "originalPosition": 131,
              "body": "Ok to ignore this",
              "createdAt": "2025-01-23T18:23:58Z",
              "updatedAt": "2025-01-23T18:23:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHZoI5M6ZOg_B",
          "commit": {
            "abbreviatedOid": "7019bb8"
          },
          "author": "bifurcation",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-23T18:42:40Z",
          "updatedAt": "2025-01-23T18:42:46Z",
          "comments": [
            {
              "originalPosition": 63,
              "body": "The idea here is like how you can have an X.509 certificate certifying an ECDSA key that is signed under a CA certificate with an RSA key.",
              "createdAt": "2025-01-23T18:42:40Z",
              "updatedAt": "2025-01-23T18:42:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHZoI5M6ZPQUP",
          "commit": {
            "abbreviatedOid": "7019bb8"
          },
          "author": "rohanmahy",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-23T20:10:43Z",
          "updatedAt": "2025-01-23T20:10:43Z",
          "comments": [
            {
              "originalPosition": 95,
              "body": "```suggestion\r\n* All members of the group support credential type `weak-multi`.\r\n```",
              "createdAt": "2025-01-23T20:10:43Z",
              "updatedAt": "2025-01-23T20:10:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHZoI5M6ZuXo6",
          "commit": {
            "abbreviatedOid": "0bbc4c3"
          },
          "author": "bifurcation",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "This looks good to me.  I believe we have addressed the comments from @Bren2010  in GitHub comments, so we should be clear to merge.",
          "createdAt": "2025-01-28T18:10:19Z",
          "updatedAt": "2025-01-28T18:10:19Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHZoI5M6Zun0j",
          "commit": {
            "abbreviatedOid": "0bbc4c3"
          },
          "author": "raphaelrobert",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-01-28T18:42:20Z",
          "updatedAt": "2025-01-28T18:42:20Z",
          "comments": []
        }
      ]
    },
    {
      "number": 39,
      "id": "PR_kwDOHZoI5M6AG_Ig",
      "title": "Update Rohan's contact info",
      "url": "https://github.com/mlswg/mls-extensions/pull/39",
      "state": "MERGED",
      "author": "rohanmahy",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-10-28T14:22:20Z",
      "updatedAt": "2025-01-31T16:45:31Z",
      "baseRepository": "mlswg/mls-extensions",
      "baseRefName": "main",
      "baseRefOid": "348b7fe0cad9321751b969cb5d13aac86deedff5",
      "headRepository": "rohanmahy/mls-extensions",
      "headRefName": "patch-1",
      "headRefOid": "2f233acbb06a39334e16cb8c9037f1a010ffb77c",
      "closedAt": "2024-11-03T11:15:17Z",
      "mergedAt": "2024-11-03T11:15:17Z",
      "mergedBy": "raphaelrobert",
      "mergeCommit": {
        "oid": "16ff720882dc651d0c5279217ea3d7cfe90afbc2"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHZoI5M6PwaGV",
          "commit": {
            "abbreviatedOid": "2f233ac"
          },
          "author": "raphaelrobert",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-11-03T11:15:12Z",
          "updatedAt": "2024-11-03T11:15:12Z",
          "comments": []
        }
      ]
    },
    {
      "number": 40,
      "id": "PR_kwDOHZoI5M6AujF2",
      "title": "IANA recommendations",
      "url": "https://github.com/mlswg/mls-extensions/pull/40",
      "state": "MERGED",
      "author": "raphaelrobert",
      "authorAssociation": "MEMBER",
      "assignees": [
        "raphaelrobert"
      ],
      "labels": [],
      "body": "Apply recommendations received from IANA",
      "createdAt": "2024-11-03T15:34:29Z",
      "updatedAt": "2025-01-23T18:28:21Z",
      "baseRepository": "mlswg/mls-extensions",
      "baseRefName": "main",
      "baseRefOid": "16ff720882dc651d0c5279217ea3d7cfe90afbc2",
      "headRepository": "mlswg/mls-extensions",
      "headRefName": "iana-recommendations",
      "headRefOid": "ab2cfa63c9c9d2e94e821985db55c769a1fed95a",
      "closedAt": "2025-01-23T18:28:21Z",
      "mergedAt": "2025-01-23T18:28:21Z",
      "mergedBy": "seanturner",
      "mergeCommit": {
        "oid": "b4d9d3224c82a375647a496bf8c1d5365e412eca"
      },
      "comments": [
        {
          "author": "rohanmahy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Hi, It is not clear to me that all of the extensions in [ab2cfa6](https://github.com/mlswg/mls-extensions/pull/40/commits/ab2cfa63c9c9d2e94e821985db55c769a1fed95a) are Safe",
          "createdAt": "2024-11-04T06:13:47Z",
          "updatedAt": "2024-11-04T06:13:47Z"
        },
        {
          "author": "raphaelrobert",
          "authorAssociation": "MEMBER",
          "body": "> Hi, It is not clear to me that all of the extensions in [ab2cfa6](https://github.com/mlswg/mls-extensions/pull/40/commits/ab2cfa63c9c9d2e94e821985db55c769a1fed95a) are Safe\r\n\r\nCan you elaborate?",
          "createdAt": "2024-11-05T10:59:20Z",
          "updatedAt": "2024-11-05T10:59:20Z"
        },
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Merge it for now and then do further edits as part of refactor.",
          "createdAt": "2025-01-23T18:28:10Z",
          "updatedAt": "2025-01-23T18:28:10Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 41,
      "id": "PR_kwDOHZoI5M6A0fmK",
      "title": "Make Standards Track",
      "url": "https://github.com/mlswg/mls-extensions/pull/41",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-11-04T16:02:21Z",
      "updatedAt": "2024-11-05T10:57:34Z",
      "baseRepository": "mlswg/mls-extensions",
      "baseRefName": "main",
      "baseRefOid": "16ff720882dc651d0c5279217ea3d7cfe90afbc2",
      "headRepository": "mlswg/mls-extensions",
      "headRefName": "seanturner-std",
      "headRefOid": "15ed209404d6a898ad6eeb3e5918afd4f719b680",
      "closedAt": "2024-11-05T10:57:34Z",
      "mergedAt": "2024-11-05T10:57:34Z",
      "mergedBy": "raphaelrobert",
      "mergeCommit": {
        "oid": "6285784da5d19a853c9864ecfd1261f961eaf490"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHZoI5M6P9YUT",
          "commit": {
            "abbreviatedOid": "15ed209"
          },
          "author": "bifurcation",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-11-05T10:31:01Z",
          "updatedAt": "2024-11-05T10:31:01Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHZoI5M6P9nrC",
          "commit": {
            "abbreviatedOid": "15ed209"
          },
          "author": "raphaelrobert",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-11-05T10:57:24Z",
          "updatedAt": "2024-11-05T10:57:24Z",
          "comments": []
        }
      ]
    },
    {
      "number": 42,
      "id": "PR_kwDOHZoI5M6BzcF3",
      "title": "Streamline safe extensions section",
      "url": "https://github.com/mlswg/mls-extensions/pull/42",
      "state": "CLOSED",
      "author": "bifurcation",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "As discussed in #34, the additional protocol mechanisms defined in the \"Extension Designer Tools\" section are not necessary for safe extensions.  We can discuss separately whether they should be re-added; my argument would be that they are not necessary, in that they don't really add anything over the extensibility mechanisms.\r\n\r\nFixes #34\r\n\r\n",
      "createdAt": "2024-11-13T15:47:44Z",
      "updatedAt": "2025-01-23T18:28:43Z",
      "baseRepository": "mlswg/mls-extensions",
      "baseRefName": "main",
      "baseRefOid": "6285784da5d19a853c9864ecfd1261f961eaf490",
      "headRepository": "bifurcation/mls-extensions",
      "headRefName": "remove-extra-structs",
      "headRefOid": "7a6397b8e8444c3aa19f4841cdcff4dbff495154",
      "closedAt": "2025-01-23T18:28:43Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "raphaelrobert",
          "authorAssociation": "MEMBER",
          "body": "@kkohbrok I think the original text was from you.",
          "createdAt": "2024-11-13T15:51:30Z",
          "updatedAt": "2024-11-13T15:51:30Z"
        },
        {
          "author": "rohanmahy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "If we remove a bunch of this text, there is text missing about the consequences (now the stack or application need to be configured with a knowledge of what is safe and in what scope). Suggested text:\r\n\r\n\"In some cases, a group or related extensions (often of multiple types) may be used only together as a single \"feature\". It is appropriate to define an additional LeafNode or GroupContext extension that means support for a specific combination of extensions. In order to determine if a single extension is safe, or if a combination of extensions in a single \"feature\" can safely access the same state, the stack or application need to be configured with that information. Misconfiguration could result in a catastrophic violation of the safe extension contract.\"",
          "createdAt": "2024-11-13T16:34:40Z",
          "updatedAt": "2024-11-13T16:34:40Z"
        },
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "OBE",
          "createdAt": "2025-01-23T18:28:43Z",
          "updatedAt": "2025-01-23T18:28:43Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 43,
      "id": "PR_kwDOHZoI5M6Hksj0",
      "title": "Incorporate Application API from AppSync-01",
      "url": "https://github.com/mlswg/mls-extensions/pull/43",
      "state": "MERGED",
      "author": "rohanmahy",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-01-13T17:36:32Z",
      "updatedAt": "2025-01-31T16:45:28Z",
      "baseRepository": "mlswg/mls-extensions",
      "baseRefName": "main",
      "baseRefOid": "b4d9d3224c82a375647a496bf8c1d5365e412eca",
      "headRepository": "rohanmahy/mls-extensions",
      "headRefName": "merge-appsync",
      "headRefOid": "02d7d5637c7c501e86b0d25c3377b11cabcadaf3",
      "closedAt": "2025-01-28T18:08:03Z",
      "mergedAt": "2025-01-28T18:08:03Z",
      "mergedBy": "bifurcation",
      "mergeCommit": {
        "oid": "4f2d0e818d862293c4016753d88df7fc68a93aa2"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHZoI5M6ZlNOl",
          "commit": {
            "abbreviatedOid": "4c3bca6"
          },
          "author": "bifurcation",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Couple of minor things and notes to handle in follow-up, but overall, this seems like a good step.",
          "createdAt": "2025-01-27T22:16:57Z",
          "updatedAt": "2025-01-27T23:27:31Z",
          "comments": [
            {
              "originalPosition": 61,
              "body": "I might overall organize the doc as: \r\n* Application API\r\n* Guidance on extending the core protocol (including when to just use the app API)\r\n* Some specific extensions and reusable components\r\n\r\nIn that spirit:\r\n```suggestion\r\nThe Messaging Layer Security (MLS) protocol is an asynchronous group \r\nauthenticated key exchange protocol.  MLS provides a number of capabilities\r\nto applications, as well as several extension points internal to the protocol.  This\r\ndocument provides a consolidated application API, guidance for how the\r\nprotocol's extension points should be used, and a few concrete examples of both\r\ncore protocol extensions and uses of the application API.\r\n```",
              "createdAt": "2025-01-27T22:16:57Z",
              "updatedAt": "2025-01-27T23:27:31Z"
            },
            {
              "originalPosition": 72,
              "body": "This intro section is copy/pasted from -appsync-01.  That's fine for now, but we should do a follow-on PR that generalizes it.",
              "createdAt": "2025-01-27T22:20:37Z",
              "updatedAt": "2025-01-27T23:27:31Z"
            },
            {
              "originalPosition": 152,
              "body": "```suggestion\r\nThis document makes heavy use of the terminology and the names of structs in the\r\nMLS specification {{!RFC9420}}.  In addition, we introduce the following new terms:\r\n```",
              "createdAt": "2025-01-27T22:22:26Z",
              "updatedAt": "2025-01-27T23:27:31Z"
            },
            {
              "originalPosition": 191,
              "body": "This text should go in the intro or terminology.  But again, happy to handle this in a follow-on.",
              "createdAt": "2025-01-27T22:24:21Z",
              "updatedAt": "2025-01-27T23:27:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHZoI5M6ZlmGC",
          "commit": {
            "abbreviatedOid": "4c3bca6"
          },
          "author": "rohanmahy",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-27T23:38:29Z",
          "updatedAt": "2025-01-27T23:38:29Z",
          "comments": [
            {
              "originalPosition": 191,
              "body": "agreed",
              "createdAt": "2025-01-27T23:38:29Z",
              "updatedAt": "2025-01-27T23:38:29Z"
            }
          ]
        }
      ]
    },
    {
      "number": 44,
      "id": "PR_kwDOHZoI5M6JQNNF",
      "title": "Create CODEOWNERS with all authors and contributors",
      "url": "https://github.com/mlswg/mls-extensions/pull/44",
      "state": "MERGED",
      "author": "rohanmahy",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-01-28T16:25:18Z",
      "updatedAt": "2025-01-31T16:44:10Z",
      "baseRepository": "mlswg/mls-extensions",
      "baseRefName": "main",
      "baseRefOid": "b4d9d3224c82a375647a496bf8c1d5365e412eca",
      "headRepository": "rohanmahy/mls-extensions",
      "headRefName": "patch-2",
      "headRefOid": "0f815afa87cdbbd4bb99a84f600ddbbb56355e97",
      "closedAt": "2025-01-28T17:07:15Z",
      "mergedAt": "2025-01-28T17:07:15Z",
      "mergedBy": "raphaelrobert",
      "mergeCommit": {
        "oid": "cb62d1d0451c444518d3132b8904cea72af78fab"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 45,
      "id": "PR_kwDOHZoI5M6JSH8i",
      "title": "Next part of appsync merge",
      "url": "https://github.com/mlswg/mls-extensions/pull/45",
      "state": "MERGED",
      "author": "rohanmahy",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "includes updates of all \"Extensions\" and the IANA considerations\r\n\r\nFixes #30, #33, #34.\r\n",
      "createdAt": "2025-01-28T21:13:37Z",
      "updatedAt": "2025-01-31T16:44:03Z",
      "baseRepository": "mlswg/mls-extensions",
      "baseRefName": "main",
      "baseRefOid": "49b739cd05ec748432881270ac83cc3066f09b29",
      "headRepository": "rohanmahy/mls-extensions",
      "headRefName": "merge-part2",
      "headRefOid": "b18ab1d57bba6351546036dfc8cf401aa627df3e",
      "closedAt": "2025-01-30T22:23:19Z",
      "mergedAt": "2025-01-30T22:23:19Z",
      "mergedBy": "bifurcation",
      "mergeCommit": {
        "oid": "d3d73b0d0ad641716dd1b80b3ea864b17e40ac78"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHZoI5M6aE9Vq",
          "commit": {
            "abbreviatedOid": "026d680"
          },
          "author": "bifurcation",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Couple of minor comments, otherwise LGTM.",
          "createdAt": "2025-01-30T20:48:22Z",
          "updatedAt": "2025-01-30T20:52:37Z",
          "comments": [
            {
              "originalPosition": 73,
              "body": "```suggestion\r\n> Note: External Commits do not typically contain pending proposals (including\r\n> AppEphemeral proposals).\r\n```",
              "createdAt": "2025-01-30T20:48:22Z",
              "updatedAt": "2025-01-30T20:52:37Z"
            },
            {
              "originalPosition": 358,
              "body": "```suggestion\r\n* Message(s): KP, LN, GC, GI\r\n```",
              "createdAt": "2025-01-30T20:50:23Z",
              "updatedAt": "2025-01-30T20:52:37Z"
            },
            {
              "originalPosition": 407,
              "body": "```suggestion\r\n* Message(s): GC\r\n```",
              "createdAt": "2025-01-30T20:50:53Z",
              "updatedAt": "2025-01-30T20:52:37Z"
            },
            {
              "originalPosition": 472,
              "body": "```suggestion\r\n* Message(s): LN, GC\r\n```",
              "createdAt": "2025-01-30T20:51:11Z",
              "updatedAt": "2025-01-30T20:52:37Z"
            },
            {
              "originalPosition": 592,
              "body": "Do we need to be this prescriptive?",
              "createdAt": "2025-01-30T20:52:06Z",
              "updatedAt": "2025-01-30T20:52:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHZoI5M6aFK2y",
          "commit": {
            "abbreviatedOid": "026d680"
          },
          "author": "rohanmahy",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-30T20:57:29Z",
          "updatedAt": "2025-01-30T20:57:30Z",
          "comments": [
            {
              "originalPosition": 592,
              "body": "This has caused us to find many problems earlier than we otherwise would have by making the author of an extension or component document where they plan to use it.",
              "createdAt": "2025-01-30T20:57:30Z",
              "updatedAt": "2025-01-30T20:57:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHZoI5M6aFPs2",
          "commit": {
            "abbreviatedOid": "026d680"
          },
          "author": "rohanmahy",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-30T21:09:27Z",
          "updatedAt": "2025-01-30T21:09:28Z",
          "comments": [
            {
              "originalPosition": 358,
              "body": "that's just following how mls-extensions specified these things in all former versions. happy to change across in a future PR.",
              "createdAt": "2025-01-30T21:09:27Z",
              "updatedAt": "2025-01-30T21:09:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHZoI5M6aFQ6F",
          "commit": {
            "abbreviatedOid": "026d680"
          },
          "author": "bifurcation",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-30T21:12:29Z",
          "updatedAt": "2025-01-30T21:12:29Z",
          "comments": [
            {
              "originalPosition": 592,
              "body": "On further thought, I affirmatively think that we should **not** be this prescriptive.  It strongly implies that the MLS stack should enforce these rules, and that doesn't make sense. Unlike extensions, which the MLS stack has to support, the MLS stack is completely ignorant of the meaning of app components.  (Indeed, that's why there's so much private use space.)",
              "createdAt": "2025-01-30T21:12:29Z",
              "updatedAt": "2025-01-30T21:12:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHZoI5M6aFRv0",
          "commit": {
            "abbreviatedOid": "026d680"
          },
          "author": "bifurcation",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-30T21:14:40Z",
          "updatedAt": "2025-01-30T21:14:40Z",
          "comments": [
            {
              "originalPosition": 592,
              "body": "Comments crossed in the ether :)  Maybe we can just be clear that the MLS stack will not enforce these, so the application needs to be prepared for components to show up in unexpected places.",
              "createdAt": "2025-01-30T21:14:40Z",
              "updatedAt": "2025-01-30T21:14:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHZoI5M6aFUR_",
          "commit": {
            "abbreviatedOid": "634dec8"
          },
          "author": "bifurcation",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-30T21:20:52Z",
          "updatedAt": "2025-01-30T21:20:52Z",
          "comments": [
            {
              "originalPosition": 605,
              "body": "```suggestion\r\n\r\nThe restrictions noted in the \"Where\" column are to be enforced by the\r\napplication.  MLS implementations MUST NOT impose restrictions on where\r\ncomponent IDs are used in which parts of MLS, unless specifically directed to by\r\nthe application.\r\n```",
              "createdAt": "2025-01-30T21:20:52Z",
              "updatedAt": "2025-01-30T21:20:52Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHZoI5M6aFUjT",
          "commit": {
            "abbreviatedOid": "634dec8"
          },
          "author": "bifurcation",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-30T21:21:33Z",
          "updatedAt": "2025-01-30T21:21:33Z",
          "comments": [
            {
              "originalPosition": 615,
              "body": "```suggestion\r\n| 0x0000 0000   | RESERVED                 | N/A   | - | RFCXXXX |\r\n| 0x0000 0001   | app_components           | LN,GC | Y | RFCXXXX |\r\n| 0x0000 0002   | safe_aad                 | LN,GC | Y | RFCXXXX |\r\n| 0x0000 0003   | content_media_types      | LN,GC | Y | RFCXXXX |\r\n| 0x0000 0004   | last_resort_key_package  | KP    | Y | RFCXXXX |\r\n| 0x0000 0005   | app_ack                  | AE    | Y | RFCXXXX |\r\n```",
              "createdAt": "2025-01-30T21:21:33Z",
              "updatedAt": "2025-01-30T21:21:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHZoI5M6aFnjq",
          "commit": {
            "abbreviatedOid": "e4f7c1d"
          },
          "author": "rohanmahy",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-30T22:11:58Z",
          "updatedAt": "2025-01-30T22:11:58Z",
          "comments": [
            {
              "originalPosition": 610,
              "body": "```suggestion\r\n\r\nInitial Contents:\r\n```",
              "createdAt": "2025-01-30T22:11:58Z",
              "updatedAt": "2025-01-30T22:11:58Z"
            }
          ]
        }
      ]
    },
    {
      "number": 46,
      "id": "PR_kwDOHZoI5M6JrCDN",
      "title": "Update Security Consideration section",
      "url": "https://github.com/mlswg/mls-extensions/pull/46",
      "state": "MERGED",
      "author": "rohanmahy",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "- Moved security discussions from various other sections into the Security Considerations and adapted to app components merge\r\n- In content advertisement clarified that quoted-pairs are unescaped in the TLS PL syntax.",
      "createdAt": "2025-01-31T17:57:07Z",
      "updatedAt": "2025-02-02T17:51:11Z",
      "baseRepository": "mlswg/mls-extensions",
      "baseRefName": "main",
      "baseRefOid": "d3d73b0d0ad641716dd1b80b3ea864b17e40ac78",
      "headRepository": "rohanmahy/mls-extensions",
      "headRefName": "minor-sec-considerations",
      "headRefOid": "0eed33ff5eac6079e564badb427e052538649816",
      "closedAt": "2025-02-02T17:51:11Z",
      "mergedAt": "2025-02-02T17:51:11Z",
      "mergedBy": "raphaelrobert",
      "mergeCommit": {
        "oid": "117fd75d088bbbd99c34161b42ac074bbd77f94a"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHZoI5M6aSvYg",
          "commit": {
            "abbreviatedOid": "0eed33f"
          },
          "author": "raphaelrobert",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-02-02T17:51:04Z",
          "updatedAt": "2025-02-02T17:51:04Z",
          "comments": []
        }
      ]
    },
    {
      "number": 49,
      "id": "PR_kwDOHZoI5M6KVZQS",
      "title": "Minor fix of multicredential subsection headings",
      "url": "https://github.com/mlswg/mls-extensions/pull/49",
      "state": "MERGED",
      "author": "rohanmahy",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-02-06T20:56:16Z",
      "updatedAt": "2025-02-19T07:35:19Z",
      "baseRepository": "mlswg/mls-extensions",
      "baseRefName": "main",
      "baseRefOid": "117fd75d088bbbd99c34161b42ac074bbd77f94a",
      "headRepository": "rohanmahy/mls-extensions",
      "headRefName": "patch-1",
      "headRefOid": "32388374b80ba085fefeed12f6bb8126e6be0c44",
      "closedAt": "2025-02-19T07:35:19Z",
      "mergedAt": "2025-02-19T07:35:19Z",
      "mergedBy": "raphaelrobert",
      "mergeCommit": {
        "oid": "d9a51c867259b25021d1761e5c5ab7e0f3bafe12"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHZoI5M6cg7fM",
          "commit": {
            "abbreviatedOid": "3238837"
          },
          "author": "raphaelrobert",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-02-19T07:35:06Z",
          "updatedAt": "2025-02-19T07:35:06Z",
          "comments": []
        }
      ]
    },
    {
      "number": 50,
      "id": "PR_kwDOHZoI5M6L0afA",
      "title": "Correctly explain the multiple uses of authenticated_data",
      "url": "https://github.com/mlswg/mls-extensions/pull/50",
      "state": "MERGED",
      "author": "rohanmahy",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Addresses #47 ",
      "createdAt": "2025-02-20T00:01:34Z",
      "updatedAt": "2025-02-20T07:46:17Z",
      "baseRepository": "mlswg/mls-extensions",
      "baseRefName": "main",
      "baseRefOid": "d9a51c867259b25021d1761e5c5ab7e0f3bafe12",
      "headRepository": "rohanmahy/mls-extensions",
      "headRefName": "clarify-aad",
      "headRefOid": "9c0322cdf9d973f16212ec025111c4e428cb610f",
      "closedAt": "2025-02-20T07:46:17Z",
      "mergedAt": "2025-02-20T07:46:17Z",
      "mergedBy": "raphaelrobert",
      "mergeCommit": {
        "oid": "5b7b0e79d69da70392bfb2abde3856d65b60442b"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHZoI5M6csrFm",
          "commit": {
            "abbreviatedOid": "9c0322c"
          },
          "author": "raphaelrobert",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-02-20T07:46:04Z",
          "updatedAt": "2025-02-20T07:46:04Z",
          "comments": []
        }
      ]
    },
    {
      "number": 51,
      "id": "PR_kwDOHZoI5M6RC1Jg",
      "title": "Fix typos using languagetool",
      "url": "https://github.com/mlswg/mls-extensions/pull/51",
      "state": "MERGED",
      "author": "timokoesters",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-04-02T08:07:49Z",
      "updatedAt": "2025-04-04T09:17:19Z",
      "baseRepository": "mlswg/mls-extensions",
      "baseRefName": "main",
      "baseRefOid": "e75d5e185baeeea762e424b3427dae46deb3ae50",
      "headRepository": "timokoesters/mls-extensions",
      "headRefName": "patch-1",
      "headRefOid": "0a0d3f0640c1c9f9a5952fcc0ba1df0946cf36e5",
      "closedAt": "2025-04-04T09:17:19Z",
      "mergedAt": "2025-04-04T09:17:19Z",
      "mergedBy": "raphaelrobert",
      "mergeCommit": {
        "oid": "8bfc467530c8b9ff71cd355933244093194d1b70"
      },
      "comments": [
        {
          "author": "bifurcation",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks @timokoesters .  Do you know if it would be practical to integrate languagetool into the CI for this doc and similar ones?  Not sure exactly what the workflow would be, since you would want humans to be able to reject suggestions from the AI.",
          "createdAt": "2025-04-02T12:57:36Z",
          "updatedAt": "2025-04-02T12:57:36Z"
        },
        {
          "author": "timokoesters",
          "authorAssociation": "CONTRIBUTOR",
          "body": "LanguageTool is pretty strict by default. Maybe you can limit the set of lints and then display them as Github PR annotations? https://github.com/marketplace/actions/pr-coverage-annotate\r\n\r\nBut I can recommend setting it up in your text editor or using the CLI ltex-cli.",
          "createdAt": "2025-04-02T19:57:22Z",
          "updatedAt": "2025-04-02T19:57:22Z"
        },
        {
          "author": "bifurcation",
          "authorAssociation": "COLLABORATOR",
          "body": "Even better, it looks like there's an action that will propose the edits so that you can just commit them: \r\nhttps://github.com/marketplace/actions/suggest-changes-action \r\n\r\nI filed an issue on the template repo: https://github.com/martinthomson/i-d-template/issues/477",
          "createdAt": "2025-04-02T22:06:22Z",
          "updatedAt": "2025-04-02T22:06:22Z"
        },
        {
          "author": "raphaelrobert",
          "authorAssociation": "MEMBER",
          "body": "@timokoesters can you please merge the latest main and see if the CI turns green? I can't do this on a fork unfortunately",
          "createdAt": "2025-04-03T16:37:14Z",
          "updatedAt": "2025-04-03T16:37:14Z"
        },
        {
          "author": "timokoesters",
          "authorAssociation": "CONTRIBUTOR",
          "body": "GitHub allows edits from maintainers by default, even if the branch is on a fork. But I've rebased it now.",
          "createdAt": "2025-04-03T16:54:58Z",
          "updatedAt": "2025-04-03T16:54:58Z"
        },
        {
          "author": "raphaelrobert",
          "authorAssociation": "MEMBER",
          "body": "> GitHub allows edits from maintainers by default, even if the branch is on a fork. But I've rebased it now.\r\n\r\nThanks. I think we are all just contributors here at best.",
          "createdAt": "2025-04-04T09:17:02Z",
          "updatedAt": "2025-04-04T09:17:02Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHZoI5M6jFsVM",
          "commit": {
            "abbreviatedOid": "0a0d3f0"
          },
          "author": "bifurcation",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-04-02T12:54:31Z",
          "updatedAt": "2025-04-03T16:54:12Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHZoI5M6jKVvx",
          "commit": {
            "abbreviatedOid": "1009bca"
          },
          "author": "timokoesters",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-04-02T19:45:26Z",
          "updatedAt": "2025-04-02T19:45:27Z",
          "comments": [
            {
              "originalPosition": 508,
              "body": "There's a missing link here",
              "createdAt": "2025-04-02T19:45:26Z",
              "updatedAt": "2025-04-02T19:45:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHZoI5M6jWPwo",
          "commit": {
            "abbreviatedOid": "0a0d3f0"
          },
          "author": "raphaelrobert",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-04-03T16:25:57Z",
          "updatedAt": "2025-04-03T16:54:12Z",
          "comments": []
        }
      ]
    },
    {
      "number": 52,
      "id": "PR_kwDOHZoI5M6RGXDC",
      "title": "Fix TODOs",
      "url": "https://github.com/mlswg/mls-extensions/pull/52",
      "state": "MERGED",
      "author": "bifurcation",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This PR fixes the TODOs that remained in the document.  It does so by making two breaking changes:\r\n\r\n1. The HPKE and signature functions are modified to align more closely with the EncryptWithLabel / SignWithLabel functions in RFC 9420\r\n2. The exporter section is rewritten to define a forward-secure exporter.",
      "createdAt": "2025-04-02T14:28:21Z",
      "updatedAt": "2025-04-11T18:34:20Z",
      "baseRepository": "mlswg/mls-extensions",
      "baseRefName": "main",
      "baseRefOid": "8bfc467530c8b9ff71cd355933244093194d1b70",
      "headRepository": "mlswg/mls-extensions",
      "headRefName": "todo",
      "headRefOid": "5284792c7f939cc5bc998b4422183a8857d315d6",
      "closedAt": "2025-04-11T18:34:20Z",
      "mergedAt": "2025-04-11T18:34:20Z",
      "mergedBy": "bifurcation",
      "mergeCommit": {
        "oid": "82af6c83b64788038d90561c50a6a250f21a01f2"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHZoI5M6jG_fM",
          "commit": {
            "abbreviatedOid": "8ac646a"
          },
          "author": "rohanmahy",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-04-02T14:38:11Z",
          "updatedAt": "2025-04-02T14:38:11Z",
          "comments": [
            {
              "originalPosition": 25,
              "body": "```suggestion\r\n  opaque base_label<V>; /*= \"Application\" */\r\n```",
              "createdAt": "2025-04-02T14:38:11Z",
              "updatedAt": "2025-04-02T14:38:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHZoI5M6jHKVT",
          "commit": {
            "abbreviatedOid": "8ac646a"
          },
          "author": "rohanmahy",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-04-02T14:50:56Z",
          "updatedAt": "2025-04-02T14:50:56Z",
          "comments": [
            {
              "originalPosition": 118,
              "body": "```suggestion\r\nnot deleted after a secret has been derived.  In this section, we define a\r\n```",
              "createdAt": "2025-04-02T14:50:56Z",
              "updatedAt": "2025-04-02T14:50:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHZoI5M6jHLx3",
          "commit": {
            "abbreviatedOid": "8ac646a"
          },
          "author": "rohanmahy",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-04-02T14:52:12Z",
          "updatedAt": "2025-04-02T14:52:12Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "is this base_label instead of label?\r\n\r\n```suggestion\r\n  opaque base_label<V>;\r\n```",
              "createdAt": "2025-04-02T14:52:12Z",
              "updatedAt": "2025-04-02T14:52:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHZoI5M6jHc9r",
          "commit": {
            "abbreviatedOid": "8ac646a"
          },
          "author": "rohanmahy",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-04-02T15:06:30Z",
          "updatedAt": "2025-04-02T15:06:31Z",
          "comments": [
            {
              "originalPosition": 126,
              "body": "maybe soften this to \"can have up to\" or \"conceptually has\"? ",
              "createdAt": "2025-04-02T15:06:30Z",
              "updatedAt": "2025-04-02T15:06:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHZoI5M6jHdsA",
          "commit": {
            "abbreviatedOid": "8ac646a"
          },
          "author": "bifurcation",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-04-02T15:07:23Z",
          "updatedAt": "2025-04-02T15:07:35Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "No, this is the actual label.  So the whole label ends up being:\r\n\r\n```\r\nRFC9420: MLS 1.0 $label\r\nHere:    MLS 1.0 Application$component_id$label\r\n```",
              "createdAt": "2025-04-02T15:07:23Z",
              "updatedAt": "2025-04-02T15:07:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHZoI5M6jIQl1",
          "commit": {
            "abbreviatedOid": "1819894"
          },
          "author": "rohanmahy",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-04-02T16:04:31Z",
          "updatedAt": "2025-04-02T16:04:31Z",
          "comments": [
            {
              "originalPosition": 137,
              "body": "```suggestion\r\nThis tree defines one exported secret per ComponentID.  The secret for a\r\n```",
              "createdAt": "2025-04-02T16:04:31Z",
              "updatedAt": "2025-04-02T16:04:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHZoI5M6jKKjo",
          "commit": {
            "abbreviatedOid": "1819894"
          },
          "author": "rohanmahy",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-04-02T19:28:52Z",
          "updatedAt": "2025-04-02T19:28:52Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHZoI5M6klAVJ",
          "commit": {
            "abbreviatedOid": "a62e5ef"
          },
          "author": "bifurcation",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-04-11T18:02:56Z",
          "updatedAt": "2025-04-11T18:03:01Z",
          "comments": [
            {
              "originalPosition": 126,
              "body": "Added the parenthetical afterward to address this.",
              "createdAt": "2025-04-11T18:02:57Z",
              "updatedAt": "2025-04-11T18:03:01Z"
            }
          ]
        }
      ]
    },
    {
      "number": 54,
      "id": "PR_kwDOHZoI5M6RSiEz",
      "title": "Update actions",
      "url": "https://github.com/mlswg/mls-extensions/pull/54",
      "state": "MERGED",
      "author": "raphaelrobert",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-04-03T16:35:03Z",
      "updatedAt": "2025-04-03T16:35:43Z",
      "baseRepository": "mlswg/mls-extensions",
      "baseRefName": "main",
      "baseRefOid": "5b7b0e79d69da70392bfb2abde3856d65b60442b",
      "headRepository": "mlswg/mls-extensions",
      "headRefName": "update-actions",
      "headRefOid": "5db9eda905736d1e1150d0703fbaa076f54eccaa",
      "closedAt": "2025-04-03T16:35:42Z",
      "mergedAt": "2025-04-03T16:35:42Z",
      "mergedBy": "raphaelrobert",
      "mergeCommit": {
        "oid": "e75d5e185baeeea762e424b3427dae46deb3ae50"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 56,
      "id": "PR_kwDOHZoI5M6S2t28",
      "title": "Introduce consolidate proposal",
      "url": "https://github.com/mlswg/mls-extensions/pull/56",
      "state": "OPEN",
      "author": "kkohbrok",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-04-16T14:56:24Z",
      "updatedAt": "2025-04-17T18:43:45Z",
      "baseRepository": "mlswg/mls-extensions",
      "baseRefName": "main",
      "baseRefOid": "82af6c83b64788038d90561c50a6a250f21a01f2",
      "headRepository": "kkohbrok/mls-extensions",
      "headRefName": "konrad/consolidate",
      "headRefOid": "671ddd8684b6c13e88928d9cf0fba2409c9f39c9",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "bifurcation",
          "authorAssociation": "COLLABORATOR",
          "body": "On the process: I can understand the motivation for this, but I don't think it should be folded into this document at this late stage.\r\n\r\nOn the merits: \r\n\r\nThis seems more like a \"ScootOver\" proposal than \"Consolidate\", since it only really consolidates anything if the rightmost person does it.  \r\n\r\nGiven how MLS suppresses unnecessary intermediate nodes, it seems like there's probably a more complete algorithm to identify the smallest tree that can represent all of the non-blank nodes in a given tree.  For example:\r\n\r\n```\r\nBEFORE:\r\n              X\r\n              |\r\n        .-----+-----.\r\n       /             \\\r\n      _               _\r\n      |               |\r\n    .-+-.           .-+-.\r\n   /     \\         /     \\\r\n  _       _       _       _\r\n / \\     / \\     / \\     / \\\r\nA   _   _   _   _   _   _   H\r\n\r\nAFTER:\r\n  X\r\n / \\\r\nA   H\r\n```\r\n\r\n```\r\nBEFORE:\r\n              X\r\n              |\r\n        .-----+-----.\r\n       /             \\\r\n      _               Y\r\n      |               |\r\n    .-+-.           .-+-.\r\n   /     \\         /     \\\r\n  _       _       _       _\r\n / \\     / \\     / \\     / \\\r\nA   _   _   _   E   _   _   H\r\n\r\nAFTER:\r\n      X\r\n      |\r\n    .-+-.\r\n   /     \\\r\n  _       Y\r\n / \\     / \\\r\nA   _   E   H\r\n```\r\n\r\nIt seems like that algorithm could be entirely deterministic, roughly:\r\n\r\n* Remove the blank nodes from the tree, resulting in an unbalanced binary tree\r\n* The depth of the new tree is the depth of the unbalanced tree\r\n* Place the leaf nodes at the leaves of a tree of that depth\r\n* ... as far left as possible, while still allowing for the intermediate nodes to be placed above them.\r\n\r\nSo you could just have it be done after all other modifications to the tree are done, and all members would do it consistently.\r\n\r\nIn fact, you don't really need a proposal at all -- just an extension that says to always do this at the end of Commit processing, just like you always truncate after a Remove.\r\n\r\nBut it's not clear what resource you're actually saving here.  While this is fun math, blank nodes in the tree do not take up much more space either in memory or on the wire, and they don't cause any additional cryptographic operations to be done.\r\n\r\nAll of which underscores that there's more complexity here than we should be adding at this stage.  Let's make a fresh draft.",
          "createdAt": "2025-04-16T21:57:27Z",
          "updatedAt": "2025-04-16T21:57:27Z"
        },
        {
          "author": "kkohbrok",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think this paper here has analyzed this more formally (Section 3.4 in particular): https://eprint.iacr.org/2024/746\r\n\r\n~~I'm not concerned with local memory or even necessarily compute. Getting rid of blanks makes shorter paths and fewer ciphertexts, which reduce commit size especially in the PQ setting. I'll try to make that clearer in the intro.~~\r\n\r\nI agree this should probably be an extension, as we want it to happen with every commit. But then the question is whether each commit is trying to optimize for the result of that particular operation, or whether the idea is to converge towards an optimal solution eventually. I'd be in favour of the latter. After all group members should commit regularly to achieve PCS. In the \"scoot over\" case there's not much more to be added in terms of complexity.\r\n\r\nEDIT: It turns out I had misremembered how efficiently blanks are handled in the tree. It turns out that moving members to the left of the tree doesn't make as much of a difference as I thought.",
          "createdAt": "2025-04-17T06:33:19Z",
          "updatedAt": "2025-04-17T12:15:55Z"
        },
        {
          "author": "raphaelrobert",
          "authorAssociation": "MEMBER",
          "body": "I think there are a few things to consider here:\r\n\r\na) It is a last-minute addition to the document. For that to be acceptable, we need to be sure about the following:\r\n - It solves a real problem (this is being debated)\r\n - It is sound and not terribly complex to implement (that's probably the case)\r\n - There's a good reason not to do it in a new draft (that reason is yet to be clearly stated)\r\n\r\nb) @bifurcation Your proposed solution sounds interesting as well. Given its complexity, it's likely out of scope for mls-extensions. I also think it wouldn't work with the existing tree hash algorithm, thus requiring even more changes.\r\n\r\nWith that in mind, we could try to give it another whirl and see if the conditions for relevance can be met. The next step should also be to discuss this on list.\r\n\r\nMy two cents on it is that it's probably good hygiene to move committers to the left. I think it comes at no cost (on average), and \u2013 on the contrary \u2013 will make for tidier trees. Ideally, running some (MC) simulations would show whether we can save on KEM operations.",
          "createdAt": "2025-04-17T16:21:08Z",
          "updatedAt": "2025-04-17T16:21:08Z"
        },
        {
          "author": "rohanmahy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Hi,\r\nThe idea of this Proposal (which I think of as the \"scootch\" Proposal) doesn't seem that hard to implement, but the application of it seems limited to groups where you had a very large number of members and now you have just a fraction. Otherwise I don't see a lot of value. We don't have consensus that this is actually a problem, let alone that we need a solution to it and that it needs to be in the mls-extensions draft.\r\nThanks, -r",
          "createdAt": "2025-04-17T18:43:44Z",
          "updatedAt": "2025-04-17T18:43:44Z"
        }
      ],
      "reviews": []
    }
  ]
}